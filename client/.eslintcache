[{"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\index.js":"1","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\store.js":"2","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\App.js":"3","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Header.js":"4","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\reducers\\userReducers.js":"5","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Footer.js":"6","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\LandingScreen.js":"7","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\AcademyCourseScreen.js":"8","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\ProfileScreen.js":"9","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\AcademyScreen.js":"10","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\ScreenHeader.js":"11","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\MaterialIcon.js":"12","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\actions\\userActions.js":"13","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\actions\\courseActions.js":"14","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseTableOfContent.js":"15","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseRecap.js":"16","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseHeader.js":"17","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseNav.js":"18","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\constants\\userConstants.js":"19","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courses.js":"20","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\utils.js":"21","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\course.js":"22","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\constants\\courseConstants.js":"23","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Section\\SectionHeader.js":"24","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\stockMarketCourse.js":"25","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\investingCourse.js":"26","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Section\\SectionNav.js":"27","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section1.js":"28","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section1.js":"29","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section2.js":"30","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section3.js":"31","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Section\\SectionContainer.js":"32","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\DragAndDrop.js":"33","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\ArticleExerciseStats.js":"34","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\ArticleQuestionnary.js":"35","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\TextList.js":"36","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\sectionNav.js":"37","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\TrainingStatus.js":"38","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\ArticleAccordion.js":"39","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\chartOptions.js":"40","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Example\\InputGroup.js":"41","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\colors.js":"42","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Example\\ResultCard.js":"43"},{"size":295,"mtime":1607526662415,"results":"44","hashOfConfig":"45"},{"size":472,"mtime":1607526662418,"results":"46","hashOfConfig":"45"},{"size":2055,"mtime":1607796249664,"results":"47","hashOfConfig":"45"},{"size":2210,"mtime":1607770753935,"results":"48","hashOfConfig":"45"},{"size":561,"mtime":1607526662416,"results":"49","hashOfConfig":"45"},{"size":183,"mtime":1607771802310,"results":"50","hashOfConfig":"45"},{"size":391,"mtime":1607526662417,"results":"51","hashOfConfig":"45"},{"size":3041,"mtime":1607871524219,"results":"52","hashOfConfig":"45"},{"size":591,"mtime":1607705601644,"results":"53","hashOfConfig":"45"},{"size":1617,"mtime":1607705541413,"results":"54","hashOfConfig":"45"},{"size":785,"mtime":1607705839714,"results":"55","hashOfConfig":"45"},{"size":1868,"mtime":1607327655438,"results":"56","hashOfConfig":"45"},{"size":778,"mtime":1607703316653,"results":"57","hashOfConfig":"45"},{"size":572,"mtime":1607703316652,"results":"58","hashOfConfig":"45"},{"size":1485,"mtime":1607869017754,"results":"59","hashOfConfig":"45"},{"size":1577,"mtime":1607703316657,"results":"60","hashOfConfig":"45"},{"size":7297,"mtime":1607775447788,"results":"61","hashOfConfig":"45"},{"size":4125,"mtime":1607865193549,"results":"62","hashOfConfig":"45"},{"size":198,"mtime":1607526662411,"results":"63","hashOfConfig":"45"},{"size":3583,"mtime":1607764259007,"results":"64","hashOfConfig":"45"},{"size":887,"mtime":1607851520540,"results":"65","hashOfConfig":"45"},{"size":2527,"mtime":1607865170027,"results":"66","hashOfConfig":"45"},{"size":196,"mtime":1607703316724,"results":"67","hashOfConfig":"45"},{"size":1247,"mtime":1607782027825,"results":"68","hashOfConfig":"45"},{"size":50,"mtime":1607703316733,"results":"69","hashOfConfig":"45"},{"size":204,"mtime":1607703316731,"results":"70","hashOfConfig":"45"},{"size":1226,"mtime":1607866092326,"results":"71","hashOfConfig":"45"},{"size":8558,"mtime":1607703316732,"results":"72","hashOfConfig":"45"},{"size":25449,"mtime":1607868437738,"results":"73","hashOfConfig":"45"},{"size":7635,"mtime":1607703316725,"results":"74","hashOfConfig":"45"},{"size":5839,"mtime":1607703316730,"results":"75","hashOfConfig":"45"},{"size":1911,"mtime":1607874716697,"results":"76","hashOfConfig":"45"},{"size":7865,"mtime":1607703316678,"results":"77","hashOfConfig":"45"},{"size":349,"mtime":1607703316655,"results":"78","hashOfConfig":"45"},{"size":1054,"mtime":1607327655431,"results":"79","hashOfConfig":"45"},{"size":1134,"mtime":1607327655433,"results":"80","hashOfConfig":"45"},{"size":395,"mtime":1607866434286,"results":"81","hashOfConfig":"45"},{"size":249,"mtime":1607327655445,"results":"82","hashOfConfig":"45"},{"size":1522,"mtime":1607805100831,"results":"83","hashOfConfig":"45"},{"size":1503,"mtime":1607860522971,"results":"84","hashOfConfig":"45"},{"size":3222,"mtime":1607873622728,"results":"85","hashOfConfig":"45"},{"size":296,"mtime":1607857188644,"results":"86","hashOfConfig":"45"},{"size":352,"mtime":1607860220210,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1u71inl",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\index.js",[],["186","187"],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\store.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\App.js",["188","189"],"import { BrowserRouter, Route } from 'react-router-dom'\r\nimport Header from './components/Header'\r\nimport LandingScreen from './screens/LandingScreen'\r\nimport Footer from './components/Footer'\r\nimport AcademyScreen from './screens/AcademyScreen';\r\nimport ProfileScreen from './screens/ProfileScreen'\r\nimport AcademyCourseScreen from './screens/AcademyCourseScreen';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\r\n    fontSize: 16,\r\n    // display4: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // display3: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // display2: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // display1: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // headline: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // title: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // subheading: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // body2: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // body1: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // caption: {\r\n    //   fontSize: 13,\r\n    // },\r\n    // button: {\r\n    //   fontSize: 13,\r\n    // },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <ThemeProvider theme={theme}>\r\n        <div className=\"app\">\r\n          <Header/>\r\n          <main>\r\n            <div className='container'>\r\n              {/* <Route path='/academy/stock-market' component={AcademyStockMarketScreen}/> */}\r\n\r\n              <Route path='/profile' component={ProfileScreen} />\r\n              <Route path='/academy/:id' component={AcademyCourseScreen}/>\r\n              <Route exact={true} path='/academy' component={AcademyScreen} />\r\n              <Route exact={true} path='/' component={LandingScreen}/>            \r\n            </div>\r\n          </main> \r\n          <Footer/> \r\n        </div>    \r\n        </ThemeProvider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Header.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\reducers\\userReducers.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Footer.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\LandingScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\AcademyCourseScreen.js",["190"],"import React,{ useEffect, useState, useRef } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ScreenHeader from '../components/ScreenHeader'\r\nimport CourseTableOfContent from '../components/Course/CourseTableOfContent'\r\nimport CourseRecap from '../components/Course/CourseRecap'\r\nimport COURSES from '../courses/courses'\r\nimport { camelCaseToString } from '../utils/utils';\r\nimport { Course } from '../utils/course';\r\nimport { completeSection } from '../actions/courseActions';\r\nimport CourseHeader from '../components/Course/CourseHeader'\r\nimport CourseNav from '../components/Course/CourseNav'\r\n\r\nexport default function AcademyCourseScreen() {\r\n\r\n    const courseContainer = useRef()\r\n    const academySections = useRef()\r\n\r\n    const { id } = useParams()\r\n    const [course, setCourse] = useState({sections:[]})\r\n    const dispatch = useDispatch()\r\n    const userSignin = useSelector(state => state.userSignin)\r\n    const { userInfo } = userSignin\r\n\r\n    useEffect(() => {\r\n        let courseContent = COURSES.find(item => item.name===id)\r\n        if(courseContent){\r\n            let updatedCourse = new Course(courseContent,userInfo)\r\n            setCourse({...updatedCourse})            \r\n        }\r\n    }, [id,userInfo])\r\n\r\n    useEffect(()=>{\r\n        // let courseContainer = document.getElementById('courseContainer')\r\n        let height = courseContainer.current.clientHeight\r\n        console.log(academySections.current.style.maxHeight = height)\r\n        // academySections.current.clientHeight = height\r\n    },[])\r\n\r\n    const handleNavigate=(direction,status)=>{\r\n        course.navigate(direction,status,course,setCourse)\r\n    }\r\n\r\n    const completeSectionHandler=(id,score)=>{\r\n        let completedArticle = course.complete(id,score,course,setCourse)\r\n        dispatch(completeSection(completedArticle))\r\n    }\r\n\r\n    let sections = []\r\n\r\n    course.sections.forEach(item =>{\r\n        let Section = item.component\r\n        sections.push(Section)\r\n    })\r\n\r\n    return (\r\n        <div className='academyCourseScreen'>     \r\n            <CourseHeader header={camelCaseToString(id)} moveTo={handleNavigate} course={course}/>\r\n            <div className='courseContainer' ref={courseContainer} id='courseContainer'>\r\n                <CourseNav moveTo={handleNavigate} course={course}/>\r\n                <div className='academySections' ref={academySections} id={'academySections'} >\r\n                    <CourseTableOfContent course={course} moveTo={handleNavigate}/>\r\n                    {sections.map((Section,index) =>\r\n                        <Section \r\n                            key={course.sections[index].sectionId}\r\n                            section={course.sections[index]} \r\n                            completeArticle={completeSectionHandler}\r\n                        />\r\n                    )}\r\n                    <CourseRecap course={course}/>    \r\n                </div>                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\ProfileScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\screens\\AcademyScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\ScreenHeader.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\MaterialIcon.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\actions\\userActions.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\actions\\courseActions.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseTableOfContent.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseRecap.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseHeader.js",["191"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function CourseHeader({header, moveTo, course}) {\r\n    return (\r\n        <div className='screenHeader'>\r\n            <h1>{header}</h1>\r\n            <StepperComponent/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction StepperComponent(){\r\n    return(\r\n        <div>\r\n            {/* <HorizontalNonLinearAlternativeLabelStepper/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      display:'flex',\r\n    },\r\n    button: {\r\n      marginRight: theme.spacing(1),\r\n      fontSize:20\r\n    },\r\n    backButton: {\r\n      marginRight: theme.spacing(1),\r\n      fontSize:20\r\n    },\r\n    completed: {\r\n      display: 'inline-block',\r\n    },\r\n    instructions: {\r\n      marginTop: theme.spacing(1),\r\n      marginBottom: theme.spacing(1),\r\n    },\r\n    stepButton:{\r\n        fontSize:80\r\n    }\r\n  }));\r\n  \r\n  function getSteps() {\r\n    return ['Table Of Content', 'Assets And Liabilities', 'Value Investing And Intrinsic Value',' Investing categories','Course Recap'];\r\n  }\r\n  \r\n  function getStepContent(step) {\r\n    switch (step) {\r\n    //   case 0:\r\n    //     return 'Step 1: Select campaign settings...';\r\n    //   case 1:\r\n    //     return 'Step 2: What is an ad group anyways?';\r\n    //   case 2:\r\n    //     return 'Step 3: This is the bit I really care about!';\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n  \r\nfunction HorizontalNonLinearAlternativeLabelStepper() {\r\n    const classes = useStyles();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [completed, setCompleted] = React.useState(new Set());\r\n    const [skipped, setSkipped] = React.useState(new Set());\r\n    const steps = getSteps();\r\n  \r\n    const totalSteps = () => {\r\n      return getSteps().length;\r\n    };\r\n  \r\n    const isStepOptional = (step) => {\r\n      return step === 1;\r\n    };\r\n  \r\n    const handleSkip = () => {\r\n      if (!isStepOptional(activeStep)) {\r\n        // You probably want to guard against something like this\r\n        // it should never occur unless someone's actively trying to break something.\r\n        throw new Error(\"You can't skip a step that isn't optional.\");\r\n      }\r\n  \r\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n      setSkipped((prevSkipped) => {\r\n        const newSkipped = new Set(prevSkipped.values());\r\n        newSkipped.add(activeStep);\r\n        return newSkipped;\r\n      });\r\n    };\r\n  \r\n    const skippedSteps = () => {\r\n      return skipped.size;\r\n    };\r\n  \r\n    const completedSteps = () => {\r\n      return completed.size;\r\n    };\r\n  \r\n    const allStepsCompleted = () => {\r\n      return completedSteps() === totalSteps() - skippedSteps();\r\n    };\r\n  \r\n    const isLastStep = () => {\r\n      return activeStep === totalSteps() - 1;\r\n    };\r\n  \r\n    const handleNext = () => {\r\n      const newActiveStep =\r\n        isLastStep() && !allStepsCompleted()\r\n          ? // It's the last step, but not all steps have been completed\r\n            // find the first step that has been completed\r\n            steps.findIndex((step, i) => !completed.has(i))\r\n          : activeStep + 1;\r\n  \r\n      setActiveStep(newActiveStep);\r\n    };\r\n  \r\n    const handleBack = () => {\r\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n  \r\n    const handleStep = (step) => () => {\r\n      setActiveStep(step);\r\n    };\r\n  \r\n    const handleComplete = () => {\r\n      const newCompleted = new Set(completed);\r\n      newCompleted.add(activeStep);\r\n      setCompleted(newCompleted);\r\n  \r\n      /**\r\n       * Sigh... it would be much nicer to replace the following if conditional with\r\n       * `if (!this.allStepsComplete())` however state is not set when we do this,\r\n       * thus we have to resort to not being very DRY.\r\n       */\r\n      if (completed.size !== totalSteps() - skippedSteps()) {\r\n        handleNext();\r\n      }\r\n    };\r\n  \r\n    const handleReset = () => {\r\n      setActiveStep(0);\r\n      setCompleted(new Set());\r\n      setSkipped(new Set());\r\n    };\r\n  \r\n    const isStepSkipped = (step) => {\r\n      return skipped.has(step);\r\n    };\r\n  \r\n    function isStepComplete(step) {\r\n      return completed.has(step);\r\n    }\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <Stepper alternativeLabel nonLinear activeStep={activeStep}>\r\n          {steps.map((label, index) => {\r\n            const stepProps = {};\r\n            const buttonProps = {};\r\n            if (isStepOptional(index)) {\r\n              buttonProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n            }\r\n            if (isStepSkipped(index)) {\r\n              stepProps.completed = false;\r\n            }\r\n            return (\r\n              <Step key={label} {...stepProps}>\r\n                <StepButton\r\n                  onClick={handleStep(index)}\r\n                  completed={isStepComplete(index)}\r\n                  {...buttonProps}\r\n                  className={classes.stepButton}\r\n                >\r\n                  {label}\r\n                </StepButton>\r\n              </Step>\r\n            );\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {allStepsCompleted() ? (\r\n            <div>\r\n              <Typography className={classes.instructions}>\r\n                All steps completed - you&apos;re finished\r\n              </Typography>\r\n              <Button onClick={handleReset}>Reset</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n              <div>\r\n                <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleNext}\r\n                  className={classes.button}\r\n                >\r\n                  Next\r\n                </Button>\r\n                {isStepOptional(activeStep) && !completed.has(activeStep) && (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleSkip}\r\n                    className={classes.button}\r\n                  >\r\n                    Skip\r\n                  </Button>\r\n                )}\r\n  \r\n                {activeStep !== steps.length &&\r\n                  (completed.has(activeStep) ? (\r\n                    <Typography variant=\"caption\" className={classes.completed}>\r\n                      Step {activeStep + 1} already completed\r\n                    </Typography>\r\n                  ) : (\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleComplete}>\r\n                      {completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'}\r\n                    </Button>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Course\\CourseNav.js",["192","193"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport { textAlign, width } from '@material-ui/system';\r\nimport TocIcon from '@material-ui/icons/Toc';\r\nimport EmojiFlagsIcon from '@material-ui/icons/EmojiFlags';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    \r\n        <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`vertical-tabpanel-${index}`}\r\n        aria-labelledby={`vertical-tab-${index}`}\r\n        \r\n        {...other}\r\n        >\r\n        {value === index && (\r\n            <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n            </Box>\r\n        )}\r\n        </div>        \r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `vertical-tab-${index}`,\r\n    'aria-controls': `vertical-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width:200,\r\n        flexGrow: 1,\r\n        backgroundColor: 'rgba(255,255,255,0.6)',\r\n        display: 'flex',\r\n        height: 'auto',  \r\n    },\r\n    tabs: {        \r\n        borderRight: `1px solid ${theme.palette.divider}`,\r\n        \"& .MuiTab-wrapper\": {\r\n            display:'block',\r\n            textAlign:'left',\r\n        },\r\n        \"& .MuiTab-wrapper div\": {\r\n            display:'grid',\r\n            gridTemplateColumns:'4rem 1fr',\r\n            alignItems:'center'\r\n        },\r\n        \r\n    },\r\n    icon:{\r\n        fontSize:30,\r\n        display:'inline-block',\r\n        justifySelf:'center'\r\n        \r\n    },\r\n    number:{\r\n        fontSize:20,\r\n        justifySelf:'center'\r\n    }\r\n}));\r\n\r\nexport default function CourseNav({moveTo,course}) {\r\n\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n        let sectionId = newValue\r\n        sectionId--\r\n        if(sectionId===-1) sectionId='start'\r\n        if(sectionId===course.sections.length) sectionId = 'recap' \r\n        moveTo(sectionId)\r\n        setValue(newValue);\r\n  };\r\n\r\n  return (\r\n        <div className={classes.root +' courseNav'}>\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                className={classes.tabs}\r\n                TabIndicatorProps={{\r\n                    style: {\r\n                        backgroundColor: \"var(--primary-color)\",\r\n                        width:'0.3rem'\r\n                    }\r\n                    }}\r\n            >\r\n                <Tab label={\r\n                    <div>\r\n                        <TocIcon className={classes.icon}/>\r\n                        Table of Content\r\n                    </div>\r\n                    \r\n                    } {...a11yProps(0)} />\r\n                {course.sections.map((section,index) =>\r\n                    <Tab key={section.id} className={classes.tab} \r\n                        label={\r\n                            <div>\r\n                                <h2 className={classes.number}>{index+1}</h2>\r\n                                {section.name}\r\n                            </div> \r\n                        }\r\n                        {...a11yProps(index+1)} \r\n                        \r\n                    />\r\n                )}\r\n                <Tab {...a11yProps(course.sections.length+1)} \r\n                    label={\r\n                        <div>\r\n                            <EmojiFlagsIcon className={classes.icon}/>\r\n                            Course Recap\r\n                        </div>                    \r\n                    }\r\n                />\r\n                </Tabs>\r\n        </div>          \r\n\r\n  );\r\n}","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\constants\\userConstants.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courses.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\utils.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\course.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\constants\\courseConstants.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Section\\SectionHeader.js",["194","195"],"import React from 'react'\r\nimport './Section.css'\r\nimport SectionNav from '../Section/SectionNav'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      \r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    appBar:{\r\n        backgroundColor: \"white\",\r\n        color:'var(--secondary-color)',\r\n        border: `2px solid ${theme.palette.divider}`,\r\n        borderRadius:'0.5rem',\r\n        flexWrap:'wrap'\r\n    },\r\n  }));\r\n\r\nexport default function SectionHeader({header,sectionNav,setSectionNav}) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className='sectionHeader'>\r\n            <Toolbar className={classes.appBar}  >\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                    <h2>{header}</h2>\r\n                </Typography>\r\n                {sectionNav&&\r\n                    <SectionNav sectionNav={sectionNav} setSectionNav={setSectionNav}/>\r\n                }\r\n            </Toolbar>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\stockMarketCourse.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\investingCourse.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Section\\SectionNav.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section1.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section1.js",["196","197","198","199","200","201","202","203","204","205","206","207","208"],"import React,{useState,useEffect} from 'react'\r\nimport SectionContainer from '../../../components/Section/SectionContainer'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport TextList from '../../../components/Article/TextList'\r\nimport DragAndDrop from '../../../components/DragAndDrop'\r\nimport SectionHeader from '../../../components/Section/SectionHeader'\r\nimport ArticleExerciseStats from '../../../components/Article/ArticleExerciseStats'\r\nimport ArticleAccordion from '../../../components/Article/ArticleAccordion'\r\nimport { lineChartOptions, assetChartOptions } from '../../../utils/chartOptions'\r\nimport InputGroup from '../../../components/Example/InputGroup'\r\nimport { formatNumber } from '../../../utils/utils';\r\nimport { colors } from '../../../utils/colors'\r\nimport { color } from '@material-ui/system';\r\nimport ResultCard from '../../../components/Example/ResultCard'\r\n\r\nexport default function AssetsAndLiabilities({section,completeArticle}){ \r\n\r\n    const sectionComponents = [\r\n        {name:'OverView',article: OverView},\r\n        {name:'Asset',article: Asset},\r\n        {name:'Liability',article: Liability},\r\n        // {name:'Asset example',article: AssetsAndLiabilitiesPractice,props:{section,completeArticle}}, \r\n        // {name:'Exercise',article: AssetsAndLiabilitiesExercise,props:{section,completeArticle}} \r\n    ]\r\n\r\n    return(\r\n        <div id={section.sectionId} className='sectionContainer'>\r\n            <SectionContainer \r\n                sectionComponents={sectionComponents} \r\n                section={section} \r\n                completeArticle={completeArticle}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction OverView(){\r\n    const [startDemo,setStartDemo] = useState(false)\r\n    const [options,setOptions] = useState({})\r\n    const [chartData,setChartData] = useState({\r\n        assetData:[],\r\n        liabilityData:[],\r\n        labels:[],\r\n        interest:0,\r\n        totalLiability:0,\r\n        depreciation:0,\r\n        gas:0,\r\n        insurance:0\r\n    })\r\n\r\n    useEffect(()=>{\r\n        \r\n        let newLabels = []\r\n        let data=[]\r\n\r\n        for(var i=0;i<120;i+=3){\r\n            let date = new Date()\r\n            date.setMonth(date.getMonth() + i);\r\n            let year=date.getFullYear()\r\n            let month = date.getMonth()\r\n            newLabels.push(month+'/'+year)\r\n            data.push(1000+(i*100))\r\n        }\r\n        setChartData({...chartData,labels:newLabels})\r\n        setOptions(lineChartOptions)\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n\r\n    const data = {\r\n        labels: chartData.labels,\r\n        datasets: [\r\n          {\r\n            label: 'Asset (6% annual interest)',\r\n            fill: false,\r\n            borderColor: 'rgba(115, 222, 146,1)',\r\n            pointRadius: 0,\r\n            pointHitRadius: 0,\r\n            data: chartData.assetData,\r\n          },\r\n          {\r\n            label: 'Liability (car)',\r\n            fill: false,\r\n            borderColor: 'rgba(222, 115, 115,1)',\r\n            pointRadius: 0,\r\n            pointHitRadius: 0,\r\n            data: chartData.liabilityData,\r\n          }\r\n        ]\r\n      };\r\n\r\n    const demoStartHandler=()=>{\r\n\r\n        setStartDemo(true)\r\n\r\n        let asset = 10000\r\n        let liability = 10000\r\n        let gas = 0\r\n        let insurance = 0\r\n\r\n        for(let i=0; i<=120; i+=3) {\r\n            setTimeout(() => {\r\n                let assetDataCopy=[...chartData.assetData]\r\n                let liabilityDataCopy=[...chartData.liabilityData]\r\n                assetDataCopy.push(asset)\r\n                liabilityDataCopy.push(liability+gas+insurance)\r\n\r\n                setChartData({\r\n                    ...chartData,\r\n                    assetData:assetDataCopy,\r\n                    liabilityData:liabilityDataCopy,\r\n                    interest:asset-10000,\r\n                    totalLiability:liability+gas+insurance,\r\n                    depreciation:liability-10000,\r\n                    gas,\r\n                    insurance\r\n                })\r\n                asset*=1.015\r\n                liability-=liability*0.025\r\n                gas-=375\r\n                insurance-=225\r\n            }, 30 * i);\r\n        }\r\n    }\r\n\r\n    return(\r\n            <div className='sectionGrid sectionContent'>\r\n                <div>\r\n                <TextList\r\n                    content={[\r\n                        {header:'Assets',text:'Assets generate income and make you wealthier  even though you dont need use time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.'},\r\n                        {header:'Liabilities',text:'Liabilities loses value over time, for example cars, boats motorcycles. Liabilities loses value over time, for example it needs maintenence, fuel etc.'},\r\n                        {buttons:[{text:'Demonstrate',onClick:demoStartHandler}]}\r\n                    ]}\r\n                />\r\n                </div>\r\n                {startDemo &&\r\n                <>\r\n                <div>\r\n                    <div className='chartContainer'>\r\n                        <Line data={data} options={options} />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className='aalDemoResult'>\r\n                    <h3>Asset vs liability in 10 years</h3>\r\n                    <ul >\r\n                        <li>\r\n                            <h3>Asset</h3>\r\n                            <ul className='list'>\r\n                                <li>\r\n                                    <p>Initial Investment:</p> \r\n                                    <p>{(10000).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Interest (6% year): </p> \r\n                                    <p>{chartData.interest.toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Total: </p> \r\n                                    <h3>{(chartData.interest+10000).toFixed(2)}</h3>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            <h3>Liability</h3>\r\n                            <ul className='list'>\r\n                                <li>\r\n                                    <p>Car price:</p> \r\n                                    <p>{(10000).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Depreciation (10% year): </p> \r\n                                    <p>{chartData.depreciation.toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Gas (1500$ year : </p> \r\n                                    <p>{(chartData.gas).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Insurance (900$ year): </p> \r\n                                    <p>{(chartData.insurance).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Total: </p> \r\n                                    <h3>{(chartData.totalLiability).toFixed(2)}</h3>\r\n                                </li>                        \r\n                            </ul>\r\n                        </li>\r\n                    </ul>                \r\n                </div>     \r\n                </>   \r\n                }                 \r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nfunction Asset(){\r\n\r\n    const [chartData,setChartData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Deposits',\r\n                data: [],\r\n                backgroundColor: colors.secondaryColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,                \r\n                borderWidth: 1\r\n            },\r\n            {\r\n                label: 'Interest',\r\n                data: [],\r\n                backgroundColor: colors.positiveColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1\r\n            },\r\n            {\r\n                type:'bar',\r\n                label: 'Yearly Interest',\r\n                data: [],\r\n                backgroundColor: colors.primaryColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1,\r\n                barPercentage: 0.6\r\n                \r\n            }\r\n        ]\r\n    })\r\n\r\n    const [inputs,setInputs] = useState({\r\n        startingInvestment:{value:10000,type:'slider',min:0,max:100000,step:1000,format:'€'},\r\n        annualReturn:{value:7,type:'slider',min:0,max:20,step:0.5,format:'%'},\r\n        monthlyDeposits:{value:200,type:'slider',min:0,max:2000,step:50,format:'€'},\r\n        timePeriod:{value:10,type:'slider',min:1,max:30,step:1,format:'Y'},\r\n    })\r\n\r\n    const [results,setResults] = useState({\r\n        deposits:0,\r\n        interest:0,\r\n        total:0,\r\n    })\r\n\r\n    useEffect(()=>{\r\n        let newLabels = []\r\n        let data=[]\r\n        let depositData=[]\r\n        let interestData=[]\r\n        let yearlyInterestData=[]\r\n        let startingValue = inputs.startingInvestment.value\r\n        const annualReturn = inputs.annualReturn.value\r\n        const monthlyDeposits = inputs.monthlyDeposits.value\r\n        const timePeriod = inputs.timePeriod.value\r\n        let interest = 0\r\n        let deposits = startingValue\r\n        for(var i=0;i<=timePeriod;i++){\r\n            let date = new Date()\r\n            date.setYear(date.getYear() + i);\r\n            let year=date.getFullYear()\r\n            let month = date.getMonth()\r\n            let label = `Year ${i}`\r\n            if(i===0) label=''\r\n            newLabels.push(label)\r\n            startingValue+=(monthlyDeposits*12) \r\n            deposits+=(monthlyDeposits*12)          \r\n            data.push(startingValue)\r\n            depositData.push(deposits)\r\n            interestData.push(startingValue-deposits)\r\n            yearlyInterestData.push(startingValue*((annualReturn/100)+1)-startingValue)\r\n            startingValue*=((annualReturn/100)+1)\r\n        }\r\n\r\n        let total = data[data.length-1]\r\n        const chartCopy=chartData\r\n        chartCopy.datasets[0].data=depositData\r\n        chartCopy.datasets[1].data=interestData\r\n        chartCopy.datasets[2].data=yearlyInterestData\r\n        setChartData({...chartCopy,labels:newLabels})\r\n        setResults({\r\n            deposits:formatNumber(deposits,'€'),\r\n            interest:formatNumber((total-deposits),'€'),\r\n            total:formatNumber(total,'€')\r\n        })\r\n    },[inputs])\r\n\r\n    const content = [\r\n        {header:'Compound Interest',text:'Assets generate income and make you wealthier  even though you dont need use time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.'},\r\n        {header:'ReInvesting',text:'Liabilities loses value over time, for example cars, boats motorcycles. Liabilities loses value over time, for example it needs maintenence, fuel etc.'},\r\n    ]\r\n\r\n    return(\r\n        <div className='sectionGrid sectionContent'>\r\n            <div> \r\n                <TextList\r\n                    content={[\r\n                        {header:'Assets',text:'Assets generate income and make you wealthier  even though you dont need use time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.'},\r\n                    ]}\r\n                /> \r\n                <ArticleAccordion content={content}/>\r\n            </div>\r\n            <div className='chartContainer'>\r\n                <Line data={chartData} options={assetChartOptions(true)} />\r\n            </div>\r\n            <div className='example'>                \r\n                <InputGroup header={'Asset example'} inputs={inputs} setInputs={setInputs}/>\r\n                <ResultCard header={`Result after ${inputs.timePeriod.value} years`} value={results.total} />\r\n                {/* <Card className='card'>\r\n                    <h2>{`Result after ${inputs.timePeriod.value} years`}</h2>\r\n                    <div className='resultBig'>\r\n                        {results.total}\r\n                    </div>\r\n                </Card> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Liability(){\r\n\r\n    const [chartData,setChartData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Car value',\r\n                data: [],\r\n                backgroundColor: 'rgba(82, 103, 122,0.5)',\r\n                pointRadius:0,\r\n                pointHitRadius:0,                \r\n                borderWidth: 1,\r\n                stack: 1,\r\n            },\r\n            {\r\n                label: 'Gas',\r\n                data: [],\r\n                backgroundColor: colors.negativeColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1,\r\n                stack: 1,\r\n            },\r\n            {\r\n                label: 'Insurance',\r\n                data: [],\r\n                backgroundColor: colors.negativeColor1,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1,\r\n                stack: 1,\r\n            },\r\n            {\r\n                label: 'Total Cost',\r\n                data: [],\r\n                borderColor:colors.secondaryColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 3,\r\n                fill:false,\r\n                stack: 2,\r\n            }\r\n        ]\r\n    })\r\n\r\n    const [inputs,setInputs] = useState({\r\n        carPrice:{value:10000,type:'slider',min:0,max:100000,step:1000,format:'€'},\r\n        depreciationPerYear:{value:10,type:'slider',min:0,max:30,step:0.5,format:'%'},\r\n        gasPerYear:{value:1200,type:'slider',min:0,max:5000,step:50,format:'€'},\r\n        insuranceCostPerYear:{value:900,type:'slider',min:0,max:2000,step:50,format:'€'},\r\n    })\r\n\r\n    const [results,setResults] = useState({\r\n        totalCost:0,\r\n    })\r\n\r\n    useEffect(()=>{\r\n        let carPrice= inputs.carPrice.value\r\n        let depreciationPerYear = inputs.depreciationPerYear.value\r\n        let gasPerYear = inputs.gasPerYear.value\r\n        let insuranceCostPerYear = inputs.insuranceCostPerYear.value\r\n\r\n        let newLabels = []        \r\n        let asset = 10000\r\n        let liability = carPrice\r\n        let gas = -0.1\r\n        let insurance = -0.1\r\n        let liabilityData = []\r\n        let gasData = []\r\n        let insuranceData = []\r\n        let total=[]\r\n\r\n        for(let i=0; i<=10; i++) {\r\n            let label = `Year ${i}`\r\n            if(i===0) label=''\r\n            newLabels.push(label)\r\n            liabilityData.push(liability)\r\n            gasData.push(gas)\r\n            insuranceData.push(insurance)\r\n            total.push(-(carPrice-liability)+gas+insurance-gas)\r\n            liability-=liability*(depreciationPerYear/100)\r\n            gas-=gasPerYear\r\n            insurance-=insuranceCostPerYear\r\n            insurance-=gasPerYear         \r\n        }\r\n\r\n        const chartCopy={...chartData}\r\n        chartCopy.datasets[0].data=liabilityData\r\n        chartCopy.datasets[1].data=gasData\r\n        chartCopy.datasets[2].data=insuranceData\r\n        chartCopy.datasets[3].data=total\r\n        setChartData({...chartCopy,labels:newLabels})\r\n        let totalCost = total[total.length-1]\r\n        setResults({\r\n            totalCost:formatNumber(totalCost,'€'),\r\n        })\r\n    },[inputs])\r\n\r\n    const content = [\r\n        {header:'Depreciation',text:'Assets generate income and make you wealthier  even though you dont need use time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.'},\r\n        {header:'Fixed Cost',text:'Liabilities loses value over time, for example cars, boats motorcycles. Liabilities loses value over time, for example it needs maintenence, fuel etc.'},\r\n        {header:'Variable Cost',text:'Liabilities loses value over time, for example cars, boats motorcycles. Liabilities loses value over time, for example it needs maintenence, fuel etc.'},\r\n    ]\r\n\r\n    return(\r\n        <div className='sectionGrid sectionContent'>\r\n            <div> \r\n                <TextList\r\n                    content={[\r\n                        {header:'Assets',text:'Assets generate income and make you wealthier  even though you dont need use time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.'},\r\n                    ]}\r\n                /> \r\n                <ArticleAccordion content={content}/>\r\n            </div>\r\n            <div className='chartContainer'>\r\n                <Line data={chartData} options={assetChartOptions(false)} />\r\n            </div>\r\n            <div className='example'>                \r\n                <InputGroup header={'Liability (Car)'} inputs={inputs} setInputs={setInputs}/>\r\n                <ResultCard header={`Total costs in 10 years`} value={results.totalCost} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AssetsAndLiabilitiesPractice(){\r\n\r\n    const [startDemo,setStartDemo] = useState(false)\r\n\r\n    const [chartData,setChartData] = useState({\r\n        assetData:[],\r\n        liabilityData:[],\r\n        labels:[],\r\n        interest:0,\r\n        totalLiability:0,\r\n        depreciation:0,\r\n        gas:0,\r\n        insurance:0\r\n    })\r\n\r\n    useEffect(()=>{\r\n        \r\n        let newLabels = []\r\n        let data=[]\r\n\r\n        for(var i=0;i<120;i+=3){\r\n            let date = new Date()\r\n            date.setMonth(date.getMonth() + i);\r\n            let year=date.getFullYear()\r\n            let month = date.getMonth()\r\n            newLabels.push(month+'/'+year)\r\n            data.push(1000+(i*100))\r\n        }\r\n        setChartData({...chartData,labels:newLabels})\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n\r\n    const data = {\r\n        labels: chartData.labels,\r\n        datasets: [\r\n          {\r\n            label: 'Asset (6% annual interest)',\r\n            fill: false,\r\n            borderColor: 'rgba(115, 222, 146,1)',\r\n            pointRadius: 0,\r\n            pointHitRadius: 0,\r\n            data: chartData.assetData,\r\n          },\r\n          {\r\n            label: 'Liability (car)',\r\n            fill: false,\r\n            borderColor: 'rgba(222, 115, 115,1)',\r\n            pointRadius: 0,\r\n            pointHitRadius: 0,\r\n            data: chartData.liabilityData,\r\n          }\r\n        ]\r\n      };\r\n\r\n      const lineOptions = {\r\n        responsive:true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    max:20000,\r\n                    min:-20000,\r\n                    autoSkip: true, \r\n                    maxTicksLimit: 5\r\n                }\r\n            }],\r\n            xAxes:[{\r\n                ticks:{\r\n                    autoSkip: true, \r\n                    maxTicksLimit: 5,\r\n                    maxRotation: 0,\r\n                    minRotation: 0\r\n                }\r\n            }]\r\n        },\r\n        tooltips: {\r\n          enabled: false,\r\n        },\r\n        plugins: {\r\n            datalabels: {\r\n                display:false\r\n            }\r\n          }\r\n      };\r\n\r\n    \r\n      const demoStartHandler=()=>{\r\n\r\n        setStartDemo(true)\r\n\r\n        let asset = 10000\r\n        let liability = 10000\r\n        let gas = 0\r\n        let insurance = 0\r\n\r\n        for(let i=0; i<=120; i+=3) {\r\n            setTimeout(() => {\r\n                let assetDataCopy=[...chartData.assetData]\r\n                let liabilityDataCopy=[...chartData.liabilityData]\r\n                assetDataCopy.push(asset)\r\n                liabilityDataCopy.push(liability+gas+insurance)\r\n\r\n                setChartData({\r\n                    ...chartData,\r\n                    assetData:assetDataCopy,\r\n                    liabilityData:liabilityDataCopy,\r\n                    interest:asset-10000,\r\n                    totalLiability:liability+gas+insurance,\r\n                    depreciation:liability-10000,\r\n                    gas,\r\n                    insurance\r\n                })\r\n                asset*=1.015\r\n                liability-=liability*0.025\r\n                gas-=375\r\n                insurance-=225\r\n            }, 30 * i);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='sectionGrid sectionContentContainer'>\r\n            <div className='sectionContent'>\r\n            <TextList\r\n                    content={[\r\n                        {header:'Assets',text:'Assets generate income and make you wealthier  even though you dont need use time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.'},\r\n                        {header:'Liabilities',text:'Liabilities loses value over time, for example cars, boats motorcycles. Liabilities loses value over time, for example it needs maintenence, fuel etc.'},\r\n                        {buttons:[{text:'Demonstrate',onClick:demoStartHandler}]}\r\n                    ]}\r\n                />\r\n                <div className='chartContainer'>\r\n                    <Line data={data} options={lineOptions} />\r\n                </div>\r\n            {startDemo &&\r\n                <div className='aalDemoResult'>\r\n                    <h2>Asset vs liability in 10 years</h2>\r\n                    <ul >\r\n                        <li>\r\n                            <h3>Asset</h3>\r\n                            <ul className='list'>\r\n                                <li>\r\n                                    <p>Initial Investment:</p> \r\n                                    <p>{(10000).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Interest (6% year): </p> \r\n                                    <p>{chartData.interest.toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Total: </p> \r\n                                    <h3>{(chartData.interest+10000).toFixed(2)}</h3>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            <h3>Liability</h3>\r\n                            <ul className='list'>\r\n                                <li>\r\n                                    <p>Car price:</p> \r\n                                    <p>{(10000).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Depreciation (10% year): </p> \r\n                                    <p>{chartData.depreciation.toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Gas (1500$ year : </p> \r\n                                    <p>{(chartData.gas).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Insurance (900$ year): </p> \r\n                                    <p>{(chartData.insurance).toFixed(2)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Total: </p> \r\n                                    <h3>{(chartData.totalLiability).toFixed(2)}</h3>\r\n                                </li>                        \r\n                            </ul>\r\n                        </li>\r\n                    </ul>                \r\n                </div>        \r\n                }                 \r\n            </div>\r\n  \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AssetsAndLiabilitiesExercise({section,completeArticle}){\r\n\r\n    const [score,setScore] = useState({})\r\n    \r\n    const scoreHandler=(newScore)=>{\r\n        setScore(newScore)\r\n        if(newScore.correct===newScore.total){\r\n            completeArticle(section.id,score)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='dragAndDropExercise articleSubPage sectionContentContainer'>\r\n            <div className='sectionContent'>\r\n            <DragAndDrop \r\n                columns={[                    \r\n                    {name:'Drag and drop items to Assets and Liabilities',id:1,\r\n                        exercise:true,\r\n                        starting:true},\r\n                    {\r\n                        name:'Assets',id:0,\r\n                        icon:'AttachMoneyIcon'\r\n                    },\r\n                    {\r\n                        name:'Liabilities',\r\n                        id:2,\r\n                        icon:'MoneyOffIcon'\r\n                    },                    \r\n                ]}\r\n                items={[\r\n                    {name:'Car',start:1,target:2},\r\n                    {name:'Stock',start:1,target:0},\r\n                    {name:'Bond',start:1,target:0},\r\n                    {name:'Boat',start:1,target:2},\r\n                    {name:'House',start:1,target:0},\r\n                    \r\n                ]}\r\n                getScore={scoreHandler}\r\n                startExercise={true}\r\n            />\r\n            <ArticleExerciseStats score={score} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section2.js",["209","210"],"\r\nimport React,{useState,useEffect} from 'react'\r\nimport SectionContainer from '../../../components/Section/SectionContainer'\r\nimport MaterialIcon from '../../../components/MaterialIcon'\r\nimport ArticleExerciseStats from '../../../components/Article/ArticleExerciseStats'\r\nimport TextList from '../../../components/Article/TextList'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n/* eslint-disable */\r\nimport { datalabels } from 'chartjs-plugin-datalabels'\r\nimport annotation from \"chartjs-plugin-annotation\";\r\n/* eslint-enable */\r\n\r\n\r\nexport default function ValueInvestingAndIntrinsicValue({section,completeArticle}){\r\n\r\n    const sectionComponents = [\r\n        {name:'Practice',article: ValueInvesting},\r\n        {name:'Exercise',article: ValueInvestingExercise,props:{section,completeArticle}} \r\n    ]\r\n\r\n    return(\r\n        <div id={section.sectionId} className='sectionContainer'>\r\n            <SectionContainer \r\n                sectionComponents={sectionComponents} \r\n                section={section} \r\n                completeArticle={completeArticle}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ValueInvestingExercise({section, completeArticle}){\r\n\r\n    const [houses, setHouses] = useState([\r\n        {price:95,size:50},\r\n        {price:130,size:55},\r\n        {price:80,size:40},\r\n        {price:null,size:75, estimate:true},\r\n    ])\r\n\r\n    const modifyPriceHandler = (e) =>{\r\n        const {value} = e.target\r\n        const housesCopy=[...houses]\r\n        housesCopy[3].price=value\r\n        setHouses(housesCopy)\r\n    }\r\n\r\n    const submitScoreHandler = () => {\r\n        const score={\r\n            total:0,\r\n            wrong:0,\r\n            correct:0,\r\n            notAnswered:0,\r\n        }\r\n        score.total++\r\n        if(houses[3].price>145&&houses[3].price<170){\r\n            score.correct++\r\n        }else{\r\n            score.wrong++\r\n        }\r\n        completeArticle(section.id,score)\r\n    }\r\n\r\n    return(\r\n        <div className='articleSubPage'>\r\n            <div className='articleExerciseHeader'>\r\n                <h2>Estimate the intrinsic value of house 4 based on price per square meter</h2>\r\n            </div>\r\n            <div className='articleMiddle'>\r\n                <div className='housePrices exerciseContainer'>    \r\n                    {houses.map((item,index) =>\r\n                        <div key={index} className='housePrice houseCard'>\r\n                            <MaterialIcon icon={'HomeIcon'} className='houseIcon'/>\r\n                            <h3>House {index+1}</h3>\r\n                            <ul className='list smallList'>   \r\n                                <li>                            \r\n                                    <label>Price</label>\r\n                                     <h3>{item.price}k</h3>\r\n                                </li>                                \r\n                                <li>\r\n                                    <label>Size</label>\r\n                                    <h3>{item.size}/m2</h3>\r\n                                </li>\r\n                                <li>\r\n                                    <label>Price/m2</label>\r\n                                    <h3>{(item.price/item.size).toFixed(2)}k</h3>\r\n                                </li>\r\n                                <li></li>\r\n                            </ul>                            \r\n                        </div>\r\n                    )}    \r\n                    <div className='estimateHousePrice'>\r\n                        <h3>Estimate</h3>\r\n                        <input min={50} max={200} type='range' onChange={(e) => modifyPriceHandler(e)}/>  \r\n                        <button onClick={submitScoreHandler} className='button'>Submit Estimate</button>\r\n                    </div>                    \r\n                </div>  \r\n            </div>\r\n            <ArticleExerciseStats score={{}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ValueInvesting(){\r\n\r\n    const [startDemo,setStartDemo] = useState(false)\r\n\r\n    const demoStartHandler = () =>{\r\n        setStartDemo(!startDemo)\r\n    }\r\n\r\n    const housePrices=[100,110,80,105]\r\n    let colors=['orange','red','green','red']\r\n\r\n    let median = housePrices.reduce((a,c) => a+c,0)/housePrices.length\r\n    const chartData={\r\n        labels: housePrices.map((item,index) => `House ${index+1}`),\r\n        datasets: [{\r\n          label: \"My First dataset\",\r\n          borderWidth: 1,\r\n          data: housePrices,\r\n        }],\r\n        lineAtIndex: 2\r\n      }\r\n\r\n      let chartOptions = {\r\n        responsive:true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          xAxes: [{\r\n            stacked: true,\r\n            display:false,\r\n            gridLines: {\r\n                display:false\r\n            }\r\n          }],\r\n          yAxes: [{\r\n            stacked: true,\r\n            display:false,\r\n            gridLines: {\r\n                display:false\r\n            }\r\n          }]\r\n        },\r\n        legend:{\r\n            display:false\r\n        },\r\n        annotation: {\r\n            annotations: [\r\n                {\r\n                  drawTime: \"afterDatasetsDraw\",\r\n                  type: \"line\",\r\n                  mode: \"horizontal\",\r\n                  scaleID: \"y-axis-0\",\r\n                  value: 100,\r\n                  borderWidth:2,\r\n                  borderColor: \"black\",\r\n                  label: {\r\n                    content: \"Median\",\r\n                    enabled: true,\r\n                    position: \"right\",\r\n                  }\r\n                }\r\n              ]\r\n        },          \r\n        plugins: {\r\n            datalabels: {\r\n              align: 'end',\r\n              anchor: 'end',\r\n              size: 50,\r\n              font: {\r\n                weight: 'bold',\r\n                size: 14,\r\n              },                 \r\n              color: function(context) {\r\n                return colors[context.dataIndex]\r\n              },\r\n              formatter: function(value){\r\n                  if(value<median*0.95) return 'Undervalued'\r\n                  if(value>median*1.05) return 'Overvalued'\r\n                  return 'Fairlyvalued';\r\n              }\r\n            },\r\n      \r\n          },\r\n\r\n      };\r\n\r\n    return(\r\n        <div className='articleSubPage'>\r\n            <TextList\r\n                content={[\r\n                    {header:'Value Investing',text:'Buying assets which value is higher than the price.'},\r\n                    {header:'Intrinsic Value',text:'The real value of item. Market value often differs from the real value of the item. Your job as an investor is the calculate the real value'},\r\n                    {buttons:[{text:'Demonstrate',onClick:demoStartHandler}]}\r\n                ]}\r\n            />\r\n                <div className='valueInvestingDemo'>\r\n                        <div className='houseChart'>\r\n                            {startDemo&&\r\n                                <Bar data={chartData} options={chartOptions}/>\r\n                            }\r\n                        </div>\r\n                        <h2>Neighborhood with 4 houses</h2>\r\n                        <div className='housePrices'>    \r\n                            {housePrices.map((item,index) =>\r\n                                <div key={index} className='housePrice'>\r\n                                    <MaterialIcon icon={'HomeIcon'} className='houseIcon'/>\r\n                                    <h3>{item}k</h3>\r\n                                </div>\r\n                            )}                        \r\n                        </div>                             \r\n                </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section3.js",["211","212"],"\r\nimport React,{useState,useEffect} from 'react'\r\nimport SectionContainer from '../../../components/Section/SectionContainer'\r\nimport DragAndDrop from '../../../components/DragAndDrop'\r\nimport TextList from '../../../components/Article/TextList'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\n\r\nexport default function InvestingCategories({section,completeArticle}){\r\n\r\n    const sectionComponents = [\r\n        {name:'Practice',article: InvestingCategoriesPractice},\r\n        {name:'Exercise',article: InvestingCategoriesExercise,props:{section,completeArticle}}\r\n    ]\r\n\r\n    return(\r\n        <div id={section.sectionId} className='sectionContainer'>\r\n            <SectionContainer \r\n                sectionComponents={sectionComponents} \r\n                section={section} \r\n                completeArticle={completeArticle}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction InvestingCategoriesExercise({section,completeArticle}){\r\n\r\n    const [score,setScore] = useState({})\r\n    \r\n    const scoreHandler=(newScore)=>{\r\n        setScore(newScore)\r\n        if((newScore.correct+newScore.wrong)===newScore.total){\r\n            completeArticle(section.id,score)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='dragAndDropExercise'>\r\n            <DragAndDrop \r\n                columns={[                    \r\n                    {name:'Drag and drop assets to correct risk category',id:0,\r\n                        exercise:true,\r\n                        starting:true},\r\n                    {\r\n                        name:'Low',\r\n                        id:1,\r\n                        icon:'AttachMoneyIcon'\r\n                    },\r\n                    {\r\n                        name:'Medium',\r\n                        id:2,\r\n                        icon:'MoneyOffIcon'\r\n                    },                    \r\n                    {\r\n                        name:'High',\r\n                        id:3,\r\n                        icon:'MoneyOffIcon'\r\n                    },                    \r\n                ]}\r\n                items={[\r\n                    {name:'Stock',start:0,target:2},\r\n                    {name:'Goverment Bonds',start:0,target:1},\r\n                    {name:'Derivates',start:0,target:3},\r\n                    {name:'Cryptocurrencies',start:0,target:3},\r\n                    {name:'Mutual funds',start:0,target:1},\r\n                    {name:'Reits',start:0,target:2},\r\n                    {name:'Private Equity',start:0,target:3},\r\n                    {name:'Corporate Bonds',start:0,target:2},\r\n                    {name:'Commodities',start:0,target:3},\r\n                    {name:'ETFs',start:0,target:2},\r\n                    {name:'Cash',start:0,target:1},\r\n                ]}\r\n                getScore={scoreHandler}\r\n                startExercise={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction InvestingCategoriesPractice(){\r\n\r\n    const [startDemo,setStartDemo] = useState(false)\r\n\r\n    const investingCategories=[\r\n        {name:'Cash',riskCategory:1,risk:1},\r\n        {name:'Goverment Bonds',riskCategory:1,risk:1.5},\r\n        {name:'Mutual fund',riskCategory:1,risk:3},\r\n        {name:'Corporate Bonds',riskCategory:2,risk:3.5},        \r\n        {name:'ETFs',riskCategory:2,risk:4},\r\n        {name:'REITs',riskCategory:2,risk:4.5},\r\n        {name:'Stock',riskCategory:2,risk:5},\r\n        {name:'Private Equity',riskCategory:3,risk:7},\r\n        {name:'Commodities',riskCategory:3,risk:7.5},\r\n        {name:'Derivates',riskCategory:3,risk:9},\r\n        {name:'CryptoCurrencies',riskCategory:3,risk:10},\r\n    ]\r\n\r\n    const demoStartHandler = () =>{\r\n        setStartDemo(!startDemo)\r\n    }\r\n\r\n    const data = {\r\n        labels: investingCategories.map(item => item.name),\r\n        datasets: [\r\n          {\r\n            fill: false,\r\n            borderColor: 'rgba(115, 222, 146,1)',\r\n            backgroundColor:investingCategories.map(item =>{\r\n                if(item.riskCategory===1) return 'green'\r\n                if(item.riskCategory===2) return 'orange'\r\n                if(item.riskCategory===3) return 'red'\r\n                return''\r\n            }),\r\n            pointRadius: 0,\r\n            pointHitRadius: 0,\r\n            data: investingCategories.map((item,index) => item.risk),\r\n          },\r\n        ]\r\n      };\r\n\r\n      const options = {\r\n        responsive:true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true\r\n                }\r\n            }],\r\n            xAxes:[{\r\n                ticks:{\r\n                    maxRotation: 0,\r\n                    minRotation: 0\r\n                }\r\n            }]\r\n        },\r\n        legend:{\r\n            display:false,\r\n        },\r\n        tooltips: {\r\n          enabled: false,\r\n        },\r\n        plugins: {\r\n            datalabels: {\r\n                display:false\r\n            }\r\n          }\r\n      };\r\n\r\n\r\n    return(\r\n        <div className='articleSubPage'>\r\n            <TextList\r\n                content={[\r\n                    {header:'Investment category risk ladder',text:'In investing risk and reward goes hand and hand.'},\r\n                    {header:'Level 1 - Cash and goverment bonds',text:'Relatively safe investment with minimun risk of losing capital.'},\r\n                    {header:'Level 2 - Corporate bonds and stocks ',text:'Medium risk and reward.'},\r\n                    {header:'Level 3 - Other investments and derivates ',text:'High risk with change of losing capital'},\r\n                    {buttons:[{text:'Risk Ladder',onClick:demoStartHandler}]}\r\n                ]}\r\n            />\r\n            <div className='articleExample'>\r\n                {startDemo &&\r\n                    <Bar data={data} options={options} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Section\\SectionContainer.js",["213","214"],"import React,{useState,useEffect} from 'react'\r\nimport SectionHeader from './SectionHeader'\r\nimport SectionNav from '../../utils/sectionNav';\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nexport default function SectionContainer({section,sectionComponents,completeArticle}) {\r\n\r\n    const [sectionNav, setSectionNav] = useState(new SectionNav([]))\r\n\r\n    useEffect(() => {\r\n        let newSectionNav = new SectionNav(sectionComponents)\r\n        setSectionNav({...newSectionNav,current:0})\r\n    }, [])\r\n\r\n    let components = []\r\n    let props = []\r\n\r\n    sectionComponents.forEach(item =>{\r\n        let Article = item.article\r\n        components.push(Article)\r\n        props.push(item.props)\r\n    })\r\n    \r\n\r\n    const changePageHandler = (newIndex)=>{\r\n        setSectionNav({...sectionNav,current:newIndex})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SectionHeader \r\n                header={section.name} \r\n                sectionNav={sectionNav} \r\n                setSectionNav={setSectionNav}\r\n            />\r\n                <SwipeableViews\r\n                    onChangeIndex={e => changePageHandler(e)}\r\n                    resistance\r\n                    // animateHeight\r\n                    index={sectionNav.current}\r\n                    className='teste'\r\n                >\r\n                    {components.map((Article,index) =>\r\n                        <div className='sectionContentContainer'>\r\n                            <Article \r\n                                key={index}\r\n                                {...props[index]}\r\n                            />                            \r\n                        </div>\r\n\r\n                    )}      \r\n                </SwipeableViews>          \r\n        </>\r\n    )\r\n}\r\n\r\nconst createArticle=(items)=>{\r\n    return items.map((item,index) => {\r\n        return{\r\n            name:item,\r\n            id:index\r\n        }\r\n    })\r\n}\r\n","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\DragAndDrop.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\ArticleExerciseStats.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\ArticleQuestionnary.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\TextList.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\sectionNav.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\TrainingStatus.js",[],["215","216"],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Article\\ArticleAccordion.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\chartOptions.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Example\\InputGroup.js",["217","218"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { camelCaseToString, formatNumber } from '../../utils/utils';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // width: 300,\r\n    padding:10,\r\n    paddingBottom:0,\r\n    // height:'auto',\r\n    // overflow:'auto'\r\n  },\r\n  InputGroup:{\r\n      display:'grid',\r\n      gridTemplateColumns:'auto 10rem',\r\n  },\r\n  value:{\r\n      marginLeft:'1rem'\r\n  },\r\n});\r\n\r\nfunction valuetext(value) {\r\n  return `${value}°C`;\r\n}\r\n\r\nexport default function InputGroup({header,inputs,setInputs}) {\r\n    const classes = useStyles();\r\n\r\n    const changeValueHandler = (event, value,name) =>{\r\n        if(inputs[name].value!==value){\r\n            setInputs({...inputs,[name]:{...inputs[name],value}})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            \r\n        <h2>{header}</h2>\r\n        {Object.keys(inputs).map(input=>\r\n                inputs[input].type=='slider'?\r\n                    <SliderInput key={input} input={input} inputs={inputs} changeValueHandler={changeValueHandler}/>:\r\n                    inputs[input].type=='switch'?\r\n                    <SwitchInput key={input} input={input} inputs={inputs} changeValueHandler={changeValueHandler}/>:\r\n                    <></>         \r\n        )}\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction SwitchInput({input,inputs,changeValueHandler}){\r\n    return(\r\n        <>\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n                {camelCaseToString(input)}\r\n            </Typography>\r\n            <Checkbox\r\n                checked={inputs[input].value}\r\n                name={input}\r\n                id={input}\r\n                color=\"primary\"\r\n                onChange={(event, value) => changeValueHandler('slider', value,input)}\r\n                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction SliderInput({input,inputs,changeValueHandler}){\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <div className={classes.InputGroup}>\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n                {camelCaseToString(input)}\r\n            </Typography>\r\n            <div></div>\r\n            <Slider\r\n                defaultValue={30}\r\n                getAriaValueText={valuetext}\r\n                aria-labelledby=\"discrete-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                step={inputs[input].step||1}\r\n                marks\r\n                min={inputs[input].min||0}\r\n                max={inputs[input].max||100}  \r\n                name={input}\r\n                id={input}\r\n                className={classes.slider}\r\n                value={inputs[input].value}\r\n                onChange={(event, value) => changeValueHandler('slider', value,input)}   \r\n            />    \r\n            <h3 className={classes.value}>\r\n                {formatNumber(inputs[input].value,inputs[input].format)}\r\n            </h3>                         \r\n        </div>\r\n    )\r\n}","C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\utils\\colors.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\StonksAcademy\\client\\src\\components\\Example\\ResultCard.js",[],{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":10,"column":8,"nodeType":"225","messageId":"226","endLine":10,"endColumn":14},{"ruleId":"223","severity":1,"message":"227","line":11,"column":8,"nodeType":"225","messageId":"226","endLine":11,"endColumn":13},{"ruleId":"223","severity":1,"message":"228","line":4,"column":8,"nodeType":"225","messageId":"226","endLine":4,"endColumn":20},{"ruleId":"223","severity":1,"message":"229","line":71,"column":10,"nodeType":"225","messageId":"226","endLine":71,"endColumn":52},{"ruleId":"223","severity":1,"message":"230","line":8,"column":10,"nodeType":"225","messageId":"226","endLine":8,"endColumn":19},{"ruleId":"223","severity":1,"message":"231","line":8,"column":21,"nodeType":"225","messageId":"226","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"232","line":4,"column":8,"nodeType":"225","messageId":"226","endLine":4,"endColumn":14},{"ruleId":"223","severity":1,"message":"233","line":5,"column":10,"nodeType":"225","messageId":"226","endLine":5,"endColumn":14},{"ruleId":"223","severity":1,"message":"234","line":3,"column":16,"nodeType":"225","messageId":"226","endLine":3,"endColumn":19},{"ruleId":"223","severity":1,"message":"235","line":6,"column":8,"nodeType":"225","messageId":"226","endLine":6,"endColumn":21},{"ruleId":"223","severity":1,"message":"236","line":13,"column":10,"nodeType":"225","messageId":"226","endLine":13,"endColumn":15},{"ruleId":"237","severity":1,"message":"238","line":102,"column":24,"nodeType":"239","messageId":"240","endLine":122,"endColumn":14},{"ruleId":"223","severity":1,"message":"241","line":257,"column":13,"nodeType":"225","messageId":"226","endLine":257,"endColumn":21},{"ruleId":"223","severity":1,"message":"242","line":262,"column":17,"nodeType":"225","messageId":"226","endLine":262,"endColumn":21},{"ruleId":"223","severity":1,"message":"243","line":263,"column":17,"nodeType":"225","messageId":"226","endLine":263,"endColumn":22},{"ruleId":"244","severity":1,"message":"245","line":287,"column":7,"nodeType":"246","endLine":287,"endColumn":15,"suggestions":"247"},{"ruleId":"223","severity":1,"message":"248","line":384,"column":13,"nodeType":"225","messageId":"226","endLine":384,"endColumn":18},{"ruleId":"244","severity":1,"message":"245","line":417,"column":7,"nodeType":"246","endLine":417,"endColumn":15,"suggestions":"249"},{"ruleId":"223","severity":1,"message":"250","line":446,"column":10,"nodeType":"225","messageId":"226","endLine":446,"endColumn":38},{"ruleId":"237","severity":1,"message":"238","line":542,"column":24,"nodeType":"239","messageId":"240","endLine":562,"endColumn":14},{"ruleId":"223","severity":1,"message":"251","line":634,"column":10,"nodeType":"225","messageId":"226","endLine":634,"endColumn":38},{"ruleId":"223","severity":1,"message":"252","line":2,"column":24,"nodeType":"225","messageId":"226","endLine":2,"endColumn":33},{"ruleId":"223","severity":1,"message":"253","line":7,"column":10,"nodeType":"225","messageId":"226","endLine":7,"endColumn":14},{"ruleId":"223","severity":1,"message":"252","line":2,"column":24,"nodeType":"225","messageId":"226","endLine":2,"endColumn":33},{"ruleId":"223","severity":1,"message":"253","line":6,"column":10,"nodeType":"225","messageId":"226","endLine":6,"endColumn":14},{"ruleId":"244","severity":1,"message":"254","line":13,"column":8,"nodeType":"246","endLine":13,"endColumn":10,"suggestions":"255"},{"ruleId":"223","severity":1,"message":"256","line":57,"column":7,"nodeType":"225","messageId":"226","endLine":57,"endColumn":20},{"ruleId":"219","replacedBy":"257"},{"ruleId":"221","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":44,"column":35,"nodeType":"261","messageId":"262","endLine":44,"endColumn":37},{"ruleId":"259","severity":1,"message":"260","line":46,"column":39,"nodeType":"261","messageId":"262","endLine":46,"endColumn":41},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"no-unused-vars","'purple' is defined but never used.","Identifier","unusedVar","'green' is defined but never used.","'ScreenHeader' is defined but never used.","'HorizontalNonLinearAlternativeLabelStepper' is defined but never used.","'textAlign' is defined but never used.","'width' is defined but never used.","'AppBar' is defined but never used.","'fade' is defined but never used.","'Bar' is defined but never used.","'SectionHeader' is defined but never used.","'color' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'asset', 'liability', 'gas', 'insurance', 'asset', 'liability', 'gas', 'insurance', 'liability', 'gas', 'insurance', 'asset', 'liability', 'liability', 'gas', 'insurance'.","ArrowFunctionExpression","unsafeRefs","'interest' is assigned a value but never used.","'year' is assigned a value but never used.","'month' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chartData'. Either include it or remove the dependency array.","ArrayExpression",["265"],"'asset' is assigned a value but never used.",["266"],"'AssetsAndLiabilitiesPractice' is defined but never used.","'AssetsAndLiabilitiesExercise' is defined but never used.","'useEffect' is defined but never used.","'Line' is defined but never used.","React Hook useEffect has a missing dependency: 'sectionComponents'. Either include it or remove the dependency array.",["267"],"'createArticle' is assigned a value but never used.",["263"],["264"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"268","fix":"270"},{"desc":"271","fix":"272"},"Update the dependencies array to be: [chartData, inputs]",{"range":"273","text":"274"},{"range":"275","text":"274"},"Update the dependencies array to be: [sectionComponents]",{"range":"276","text":"277"},[10777,10785],"[chartData, inputs]",[15680,15688],[507,509],"[sectionComponents]"]