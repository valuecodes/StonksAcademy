[{"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\index.js":"1","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\App.js":"2","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\Header.js":"3","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\screens\\LandingScreen.js":"4","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\Footer.js":"5","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\screens\\AcademyScreen.js":"6","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\SectionHeader.js":"7","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\utils\\utils.js":"8","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\TrainingStatus.js":"9","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\screens\\AcademyInvestingScreen.js":"10","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\MaterialIcon.js":"11","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\DragAndDrop.js":"12","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\ArticleHeader.js":"13","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\ArticleControls.js":"14"},{"size":218,"mtime":1606830014387,"results":"15","hashOfConfig":"16"},{"size":848,"mtime":1606915598655,"results":"17","hashOfConfig":"16"},{"size":799,"mtime":1606840969548,"results":"18","hashOfConfig":"16"},{"size":384,"mtime":1606840969550,"results":"19","hashOfConfig":"16"},{"size":245,"mtime":1606840969547,"results":"20","hashOfConfig":"16"},{"size":1215,"mtime":1606892990997,"results":"21","hashOfConfig":"16"},{"size":696,"mtime":1606917432431,"results":"22","hashOfConfig":"16"},{"size":304,"mtime":1606892990997,"results":"23","hashOfConfig":"16"},{"size":249,"mtime":1607022999078,"results":"24","hashOfConfig":"16"},{"size":7935,"mtime":1607093529328,"results":"25","hashOfConfig":"16"},{"size":972,"mtime":1607025958156,"results":"26","hashOfConfig":"16"},{"size":7990,"mtime":1607065703185,"results":"27","hashOfConfig":"16"},{"size":192,"mtime":1607017889183,"results":"28","hashOfConfig":"16"},{"size":143,"mtime":1607019198206,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1n5r2uf",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\index.js",[],["61","62"],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\App.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\Header.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\screens\\LandingScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\Footer.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\screens\\AcademyScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\SectionHeader.js",["63"],"import React from 'react'\r\nimport TrainingStatus from './TrainingStatus'\r\nimport { Link } from 'react-router-dom'\r\nimport MaterialIcon from './MaterialIcon'\r\n\r\nexport default function SectionHeader({header,subHeader,back}) {\r\n    return (\r\n        <header className='sectionHeader'>\r\n            <h1>{header}</h1>\r\n            {back&& <BackButton linkTo={back} />} \r\n            <h2>{subHeader}</h2>\r\n            <TrainingStatus/>\r\n        </header>\r\n    )\r\n}\r\n\r\nfunction BackButton({linkTo}){\r\n    return(\r\n        <Link to={linkTo} className='backButton'>\r\n            Back\r\n            {/* <MaterialIcon icon={'ArrowBackIosIcon'} color={'var(--primary-color)'}/> */}\r\n        </Link>\r\n    )\r\n}","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\utils\\utils.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\TrainingStatus.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\screens\\AcademyInvestingScreen.js",["64","65","66"],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\MaterialIcon.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\DragAndDrop.js",["67","68","69","70","71","72"],"import React,{ useState,useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport MaterialIcon from './MaterialIcon'\r\n\r\nexport default function DragAndDrop(props) {\r\n\r\n    const {\r\n        startingColumns=[],\r\n        columns,\r\n        items,\r\n        getScore,\r\n        startExercise\r\n    } = props\r\n\r\n    const [dragAndDrop, setDragAndDrop] = useState([])\r\n    const [score,setScore] = useState({wrongAnswerCount:0})\r\n\r\n    useEffect(()=>{\r\n        \r\n        let numberOfColumns=5\r\n        let newDragAndDrop=[]\r\n        let total=0\r\n\r\n        columns.forEach(column =>{\r\n            newDragAndDrop.push({\r\n                droppable: 'droppable.'+column.id,\r\n                droppableIndex:column.id,\r\n                ...column,\r\n                draggables:items.filter(item => item.start===column.id)\r\n                    .map((item,index) => { return{\r\n                        id: `item-${column.id}-${index}`,\r\n                        content: item.name,\r\n                        target: item.target,\r\n                        start: item.start,\r\n                        correct: null,\r\n                    }})\r\n            }) \r\n        })\r\n        setDragAndDrop(newDragAndDrop)\r\n        calculateScore(newDragAndDrop)\r\n    },[])\r\n\r\n    const onDragEnd = (result) => {\r\n        const { source, destination } = result;\r\n        // dropped outside the list\r\n        if(!destination) return;\r\n        let updatedDragAndDrop=[...dragAndDrop]\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n\r\n            let listIndex = dragAndDrop.findIndex(item => item.droppable === source.droppableId) \r\n            const items = reorder(\r\n                dragAndDrop[listIndex].draggables,\r\n                source.index,\r\n                destination.index\r\n            );\r\n            \r\n            updatedDragAndDrop[listIndex].draggables = items\r\n            setDragAndDrop(updatedDragAndDrop);\r\n\r\n        } else {\r\n            let sourceIndex = dragAndDrop.findIndex(item => item.droppable === source.droppableId) \r\n            let destinationIndex = dragAndDrop.findIndex(item => item.droppable === destination.droppableId) \r\n            \r\n            let { result, movedItem } = move(\r\n                dragAndDrop[sourceIndex].draggables,\r\n                dragAndDrop[destinationIndex].draggables,\r\n                source,\r\n                destination\r\n            );\r\n\r\n            Object.keys(result).forEach(id =>{\r\n                let index = updatedDragAndDrop.findIndex(item => item.droppable===id)\r\n                updatedDragAndDrop[index].draggables = result[id]\r\n            })\r\n            movedItem.correct=null\r\n            setDragAndDrop(updatedDragAndDrop);\r\n            let destIndex = destination.droppableId.split('.')[1]\r\n            if(destIndex!=movedItem.start){\r\n                if(destIndex==movedItem.target){\r\n                    movedItem.correct=true            \r\n                }else{\r\n                    movedItem.correct=false\r\n                    score.wrongAnswerCount++\r\n                }                  \r\n            }\r\n            calculateScore(dragAndDrop)\r\n        }\r\n    };\r\n\r\n    const calculateScore=(dragAndDrop)=>{\r\n        \r\n        let newScore={\r\n            total:0,\r\n            correct:0,\r\n            wrong:0,\r\n            def:0,\r\n            wrongAnswerCount:score.wrongAnswerCount\r\n        }\r\n\r\n        dragAndDrop.forEach(column =>{\r\n            column.draggables.forEach(item => {\r\n                if(item.correct===true) newScore.correct++\r\n                if(item.correct===false) newScore.wrong++\r\n                if(item.correct===null) newScore.def++\r\n                newScore.total++\r\n            })\r\n        })\r\n        setScore(newScore)\r\n        getScore(newScore)\r\n    }\r\n\r\n    return (\r\n        <div className='dragAndDrop'>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                {dragAndDrop.map(item =>\r\n                    (startExercise||!item.exercise)&&\r\n                    <Droppable key={item.droppable} droppableId={item.droppable}>\r\n                        {(provided, snapshot) => (\r\n                            <div className={`droppableContainer ${item.starting?'starting':''}`}>\r\n                            <h2 className='dragAndDropHeader'>{item.name}</h2>\r\n                             <div\r\n                                ref={provided.innerRef}\r\n                                style={!item.exercise?getListStyle(snapshot.isDraggingOver,item.exercise):{}}\r\n                            >\r\n                                \r\n                                <div className='draggingAreaContainer'>\r\n                                <div className='draggingArea'>\r\n                                    {item.icon && <MaterialIcon className='dndIcon' icon={item.icon}/>}\r\n                                    {item.draggables.map((item, index) => (\r\n                                        <Draggable\r\n                                            key={item.id}\r\n                                            draggableId={item.id}\r\n                                            index={index}>\r\n                                            {(provided, snapshot) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    className='draggableItem'\r\n                                                    style={getItemStyle(\r\n                                                        snapshot.isDragging,\r\n                                                        provided.draggableProps.style\r\n                                                    )}>\r\n                                                    {item.content}\r\n                                                </div> \r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}                                      \r\n                                </div>\r\n                                </div>\r\n                                {provided.placeholder}\r\n                            </div>\r\n                            <p className='dragAndDropInfoText'>{item.infoText}</p>\r\n                            </div> \r\n                        )}\r\n                    </Droppable>      \r\n                )}\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n}\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move=(source, destination, droppableSource, droppableDestination)=>{\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n    const movedItem = removed\r\n\r\n    return { result, movedItem }\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    userSelect: 'none',\r\n    margin: `0 0 ${grid}px 0`,\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n    color: isDragging ? 'black' : 'var(--text-light)',\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = (isDraggingOver,exercise) => ({\r\n    background: isDraggingOver ? 'lightgray' :'var(--background-color)' ,\r\n    // padding: grid,\r\n    // paddingTop:'5rem',\r\n    // minHeight:'380px',\r\n    // width: 250\r\n});\r\n\r\n","C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\ArticleHeader.js",[],"C:\\Users\\Juha\\Desktop\\Projects\\MidastoPedia\\client\\src\\components\\ArticleControls.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":20},{"ruleId":"77","severity":1,"message":"81","line":1,"column":24,"nodeType":"79","messageId":"80","endLine":1,"endColumn":33},{"ruleId":"77","severity":1,"message":"82","line":1,"column":34,"nodeType":"79","messageId":"80","endLine":1,"endColumn":40},{"ruleId":"77","severity":1,"message":"83","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":16},{"ruleId":"77","severity":1,"message":"84","line":8,"column":9,"nodeType":"79","messageId":"80","endLine":8,"endColumn":24},{"ruleId":"77","severity":1,"message":"85","line":20,"column":13,"nodeType":"79","messageId":"80","endLine":20,"endColumn":28},{"ruleId":"77","severity":1,"message":"86","line":22,"column":13,"nodeType":"79","messageId":"80","endLine":22,"endColumn":18},{"ruleId":"87","severity":1,"message":"88","line":41,"column":7,"nodeType":"89","endLine":41,"endColumn":9,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":79,"column":25,"nodeType":"93","messageId":"94","endLine":79,"endColumn":27},{"ruleId":"91","severity":1,"message":"95","line":80,"column":29,"nodeType":"93","messageId":"94","endLine":80,"endColumn":31},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'MaterialIcon' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'ReactDOM' is defined but never used.","'startingColumns' is assigned a value but never used.","'numberOfColumns' is assigned a value but never used.","'total' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateScore', 'columns', and 'items'. Either include them or remove the dependency array.","ArrayExpression",["98"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [calculateScore, columns, items]",{"range":"101","text":"102"},[1284,1286],"[calculateScore, columns, items]"]