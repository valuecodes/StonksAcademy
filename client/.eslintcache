[{"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\index.js":"1","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\App.js":"2","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\store.js":"3","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\AcademyScreen.js":"4","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\LandingScreen.js":"5","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\ProfileScreen.js":"6","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\reducers\\userReducers.js":"7","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\utils.js":"8","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\actions\\userActions.js":"9","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\constants\\userConstants.js":"10","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Article\\TextList.js":"11","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\styles.js":"12","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\AcademyCourseScreen.js":"13","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\PrivacyPolicyScreen.js":"14","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\reducers\\courseReducers.js":"15","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\Header.js":"16","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\Footer.js":"17","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\ScreenHeader.js":"18","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\course.js":"19","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courses.js":"20","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\MaterialIcon.js":"21","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\Navigation.js":"22","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseTableOfContent.js":"23","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseRecap.js":"24","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseHeader.js":"25","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseNav.js":"26","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\actions\\courseActions.js":"27","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\constants\\courseConstants.js":"28","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Buttons.js":"29","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Section\\SectionHeader.js":"30","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Article\\ArticleTerm.js":"31","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Exercise\\ExerciseScore.js":"32","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\investingCourse.js":"33","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\stockMarketCourse.js":"34","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section5.js":"35","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section3.js":"36","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section2.js":"37","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section1.js":"38","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section3.js":"39","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section2.js":"40","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section1.js":"41","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Section\\SectionNav.js":"42","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Section\\SectionContainer.js":"43","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Exercise\\ExcersiseQuiz.js":"44","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Article\\ArticleAccordion.js":"45","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Table.js":"46","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\VerticalStepper.js":"47","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Sliders.js":"48","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Tooltip.js":"49","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Exercise\\ExerciseCompleted.js":"50","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\ShareExample.js":"51","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\BusinessExample.js":"52","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\ResultCard.js":"53","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\colors.js":"54","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\InputGroup.js":"55","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\chartOptions.js":"56","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\sectionNav.js":"57","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\questions.js":"58","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\ShowMore.js":"59","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\snackbar.js":"60"},{"size":615,"mtime":1608662734278,"results":"61","hashOfConfig":"62"},{"size":1471,"mtime":1608807594493,"results":"63","hashOfConfig":"62"},{"size":728,"mtime":1608807594539,"results":"64","hashOfConfig":"62"},{"size":1803,"mtime":1608662734280,"results":"65","hashOfConfig":"62"},{"size":681,"mtime":1608662734281,"results":"66","hashOfConfig":"62"},{"size":4435,"mtime":1608807594536,"results":"67","hashOfConfig":"62"},{"size":561,"mtime":1608654355279,"results":"68","hashOfConfig":"62"},{"size":1013,"mtime":1608662734289,"results":"69","hashOfConfig":"62"},{"size":809,"mtime":1608664770170,"results":"70","hashOfConfig":"62"},{"size":198,"mtime":1608654355260,"results":"71","hashOfConfig":"62"},{"size":1442,"mtime":1608662734165,"results":"72","hashOfConfig":"62"},{"size":1576,"mtime":1608807594601,"results":"73","hashOfConfig":"62"},{"size":4034,"mtime":1608807594531,"results":"74","hashOfConfig":"62"},{"size":19086,"mtime":1608662734282,"results":"75","hashOfConfig":"62"},{"size":1693,"mtime":1608807594530,"results":"76","hashOfConfig":"62"},{"size":2224,"mtime":1608664764845,"results":"77","hashOfConfig":"62"},{"size":569,"mtime":1608662734198,"results":"78","hashOfConfig":"62"},{"size":479,"mtime":1608807594522,"results":"79","hashOfConfig":"62"},{"size":3021,"mtime":1608808997585,"results":"80","hashOfConfig":"62"},{"size":2831,"mtime":1608807594527,"results":"81","hashOfConfig":"62"},{"size":3068,"mtime":1608755949169,"results":"82","hashOfConfig":"62"},{"size":3304,"mtime":1608662734199,"results":"83","hashOfConfig":"62"},{"size":1571,"mtime":1608883579506,"results":"84","hashOfConfig":"62"},{"size":2935,"mtime":1608810048652,"results":"85","hashOfConfig":"62"},{"size":192,"mtime":1608662734167,"results":"86","hashOfConfig":"62"},{"size":4943,"mtime":1608807594509,"results":"87","hashOfConfig":"62"},{"size":1618,"mtime":1608807594509,"results":"88","hashOfConfig":"62"},{"size":672,"mtime":1608807594524,"results":"89","hashOfConfig":"62"},{"size":1800,"mtime":1608807594520,"results":"90","hashOfConfig":"62"},{"size":1299,"mtime":1608809587121,"results":"91","hashOfConfig":"62"},{"size":443,"mtime":1608662734164,"results":"92","hashOfConfig":"62"},{"size":1406,"mtime":1608807594518,"results":"93","hashOfConfig":"62"},{"size":192,"mtime":1608662734228,"results":"94","hashOfConfig":"62"},{"size":228,"mtime":1608662734268,"results":"95","hashOfConfig":"62"},{"size":6629,"mtime":1608662734232,"results":"96","hashOfConfig":"62"},{"size":4292,"mtime":1608662734231,"results":"97","hashOfConfig":"62"},{"size":7842,"mtime":1608662734230,"results":"98","hashOfConfig":"62"},{"size":4628,"mtime":1608662734229,"results":"99","hashOfConfig":"62"},{"size":9915,"mtime":1608662734228,"results":"100","hashOfConfig":"62"},{"size":9286,"mtime":1608807594526,"results":"101","hashOfConfig":"62"},{"size":16333,"mtime":1608662734226,"results":"102","hashOfConfig":"62"},{"size":1195,"mtime":1608662734222,"results":"103","hashOfConfig":"62"},{"size":1955,"mtime":1608662734203,"results":"104","hashOfConfig":"62"},{"size":11515,"mtime":1608807594509,"results":"105","hashOfConfig":"62"},{"size":1603,"mtime":1608662734162,"results":"106","hashOfConfig":"62"},{"size":1480,"mtime":1608662734187,"results":"107","hashOfConfig":"62"},{"size":1874,"mtime":1608662734197,"results":"108","hashOfConfig":"62"},{"size":565,"mtime":1608662734182,"results":"109","hashOfConfig":"62"},{"size":681,"mtime":1608662734195,"results":"110","hashOfConfig":"62"},{"size":1068,"mtime":1608754976772,"results":"111","hashOfConfig":"62"},{"size":1289,"mtime":1608662734173,"results":"112","hashOfConfig":"62"},{"size":968,"mtime":1608662734170,"results":"113","hashOfConfig":"62"},{"size":318,"mtime":1608662734173,"results":"114","hashOfConfig":"62"},{"size":296,"mtime":1608662734286,"results":"115","hashOfConfig":"62"},{"size":3224,"mtime":1608662734172,"results":"116","hashOfConfig":"62"},{"size":1503,"mtime":1608662734285,"results":"117","hashOfConfig":"62"},{"size":395,"mtime":1608662734287,"results":"118","hashOfConfig":"62"},{"size":8523,"mtime":1608662734270,"results":"119","hashOfConfig":"62"},{"size":4052,"mtime":1608807594521,"results":"120","hashOfConfig":"62"},{"size":1688,"mtime":1608813014548,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"19i3svm",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"124"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"124"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\index.js",[],["246","247"],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\App.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\store.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\AcademyScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\LandingScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\ProfileScreen.js",["248"],"import React,{ useEffect, useState } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport ScreenHeader from '../components/Page/ScreenHeader'\r\nimport { useSelector, useDispatch} from 'react-redux'\r\nimport { getCompletedSections, resetUserCourses } from '../actions/courseActions';\r\nimport Card from '@material-ui/core/Card';\r\nimport { camelCaseToString } from '../utils/utils';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport COURSES from '../courses/courses'\r\nimport { ShowSections } from '../components/Other/ShowMore';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { ResetButton } from '../components/Other/Buttons';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nexport default function ProfileScreen() {\r\n\r\n    const [reseted, setReseted]=useState(false)\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [userCourses, setUserCourses] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n    const userSignin = useSelector(state => state.userSignin)\r\n    const { userInfo } = userSignin\r\n    const sectionGetCompleted = useSelector(state => state.sectionGetCompleted)\r\n    const { completedSections } = sectionGetCompleted\r\n    const courseReset = useSelector(state => state.courseReset)\r\n    const { loading, success, error } = courseReset\r\n\r\n    useEffect(()=>{\r\n        dispatch(getCompletedSections())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(success&&reseted){\r\n            enqueueSnackbar('Courses reseted succesfully!', {variant:'success'});\r\n            setUserCourses(null)\r\n            setReseted(false)\r\n        }\r\n        if(error&&reseted){\r\n            enqueueSnackbar('Error at deleting courses', {variant:'error'});\r\n            setReseted(false)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps        \r\n    },[success,error])\r\n    \r\n    useEffect(()=>{\r\n        if(completedSections){\r\n            let newUserCourses = [...COURSES]\r\n            newUserCourses.forEach(item =>{\r\n               item.completedSections=[]\r\n               item.sections.forEach(sec => sec.score=null)\r\n            })\r\n            newUserCourses.forEach(item => item.attended=false)\r\n            completedSections.forEach(item => {\r\n                const { course, name } = item\r\n                let courseIndex = newUserCourses.findIndex(item => item.name === course)\r\n                let sectionIndex = newUserCourses[courseIndex].sections.findIndex(item => item.name===name)\r\n                newUserCourses[courseIndex].sections[sectionIndex].score=item.score\r\n                newUserCourses[courseIndex].completedSections.push(item)\r\n                newUserCourses[courseIndex].attended=true\r\n            });\r\n\r\n            newUserCourses.forEach(item => {\r\n                if(item.attended){\r\n                    item.completeRate = +((item.completedSections.length / item.sections.length)*100).toFixed(0) \r\n                }\r\n            })\r\n            setUserCourses(newUserCourses)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[completedSections])\r\n\r\n    const resetCoursesHandler = async () => {\r\n        setReseted(true)\r\n        dispatch(resetUserCourses())\r\n    }\r\n\r\n    return (\r\n        !userInfo?\r\n            <Redirect to='/'/>\r\n        :\r\n        <div className='profileScreen'>\r\n            <ScreenHeader header={'Profile'} /> \r\n            <h2>{userInfo.name}</h2>\r\n            <h3>Courses Attended</h3>\r\n            <div className='myCourses'>\r\n                {userCourses&&userCourses.map(course =>\r\n                    course.attended&&\r\n                        <Card key={course.name} className='myCourse'>\r\n                            <div className='myCourseHeader'>\r\n                                <h3>{camelCaseToString(course.name)}</h3>\r\n                                <Chip className='courseCompleteRate'  size=\"small\" label={`Completed : ${course.completeRate}%`} />\r\n                                <LinearProgress className='courseProgress' variant=\"determinate\" value={course.completeRate} />\r\n                            </div>\r\n                            <ShowSections text={'testing'} sections={course.sections}/>\r\n                        </Card>\r\n                )}\r\n            </div>\r\n            <ResetButton text={'Reset Course progress'} onClick={resetCoursesHandler}/>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\reducers\\userReducers.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\utils.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\actions\\userActions.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\constants\\userConstants.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Article\\TextList.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\styles.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\AcademyCourseScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\screens\\PrivacyPolicyScreen.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\reducers\\courseReducers.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\Header.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\Footer.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\ScreenHeader.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\course.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courses.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\MaterialIcon.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Page\\Navigation.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseTableOfContent.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseRecap.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseHeader.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Course\\CourseNav.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\actions\\courseActions.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\constants\\courseConstants.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Buttons.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Section\\SectionHeader.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Article\\ArticleTerm.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Exercise\\ExerciseScore.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\investingCourse.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\stockMarketCourse.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section5.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section3.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section2.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\stockMarket\\Section1.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section3.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section2.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\courseMaterial\\investing\\Section1.js",["249"],"import React,{useState,useEffect} from 'react'\r\nimport SectionContainer from '../../../components/Section/SectionContainer'\r\nimport { Line } from 'react-chartjs-2'\r\nimport TextList from '../../../components/Article/TextList'\r\nimport ArticleAccordion from '../../../components/Article/ArticleAccordion'\r\nimport { lineChartOptions, assetChartOptions } from '../../../utils/chartOptions'\r\nimport InputGroup from '../../../components/Example/InputGroup'\r\nimport { formatNumber } from '../../../utils/utils';\r\nimport { colors } from '../../../utils/colors'\r\nimport ResultCard from '../../../components/Example/ResultCard'\r\nimport ExerciseQuiz from '../../../components/Exercise/ExcersiseQuiz';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nexport default function AssetsAndLiabilities(props){ \r\n\r\n    const sectionComponents = [\r\n        {name:'OverView',article: OverView},\r\n        {name:'Asset',article: Asset},\r\n        {name:'Liability',article: Liability},\r\n        {name:'Exercise',article: ExerciseQuiz}\r\n    ]\r\n\r\n    return(\r\n        <SectionContainer \r\n            sectionComponents={sectionComponents} \r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nfunction OverView(){\r\n    const [startDemo,setStartDemo] = useState(false)\r\n    const [options,setOptions] = useState({})\r\n    const [chartData,setChartData] = useState({\r\n        assetData:[],\r\n        liabilityData:[],\r\n        labels:[],\r\n        interest:0,\r\n        totalLiability:0,\r\n        depreciation:0,\r\n        gas:0,\r\n        insurance:0\r\n    })\r\n\r\n    useEffect(()=>{\r\n        \r\n        let newLabels = []\r\n        let data=[]\r\n\r\n        for(var i=0;i<120;i+=3){\r\n            let date = new Date()\r\n            date.setMonth(date.getMonth() + i);\r\n            let year=date.getFullYear()\r\n            let month = date.getMonth()\r\n            newLabels.push(month+'/'+year)\r\n            data.push(1000+(i*100))\r\n        }\r\n        setChartData({...chartData,labels:newLabels})\r\n        setOptions(lineChartOptions)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n\r\n    const data = {\r\n        labels: chartData.labels,\r\n        datasets: [\r\n          {\r\n            label: 'Asset (6% annual interest)',\r\n            fill: false,\r\n            borderColor: 'rgba(115, 222, 146,1)',\r\n            pointRadius: 0,\r\n            pointHitRadius: 0,\r\n            data: chartData.assetData,\r\n          },\r\n          {\r\n            label: 'Liability (car)',\r\n            fill: false,\r\n            borderColor: 'rgba(222, 115, 115,1)',\r\n            pointRadius: 0,\r\n            pointHitRadius: 0,\r\n            data: chartData.liabilityData,\r\n          }\r\n        ]\r\n      };\r\n\r\n    const demoStartHandler=()=>{\r\n\r\n        setStartDemo(true)\r\n\r\n        let asset = 10000\r\n        let liability = 10000\r\n        let gas = 0\r\n        let insurance = 0\r\n\r\n        for(let i=0; i<=120; i+=3) {\r\n            setTimeout(() => {\r\n                let assetDataCopy=[...chartData.assetData]\r\n                let liabilityDataCopy=[...chartData.liabilityData]\r\n                assetDataCopy.push(asset)\r\n                liabilityDataCopy.push(liability+gas+insurance)\r\n\r\n                setChartData({\r\n                    ...chartData,\r\n                    assetData:assetDataCopy,\r\n                    liabilityData:liabilityDataCopy,\r\n                    interest:asset-10000,\r\n                    totalLiability:liability+gas+insurance,\r\n                    depreciation:liability-10000,\r\n                    gas,\r\n                    insurance\r\n                })\r\n                asset*=1.015\r\n                liability-=liability*0.025\r\n                gas-=375\r\n                insurance-=225\r\n            }, 30 * i);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='sectionGrid'>\r\n            <div>\r\n            <TextList\r\n                content={[\r\n                    {header:'Assets',text:\"Assets generate income and make you wealthier even though you don't need use lot of time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.\"},\r\n                    {header:'Liabilities',text:'Liabilities loses value over time and are costly to maintain. For example cars, boats and  motorcycles values are dropping every year and they need lot of money for gas, insurance and maintenence etc.'},\r\n                    {buttons:[{text:'Demonstrate',onClick:demoStartHandler}]}\r\n                ]}\r\n            />\r\n            </div>\r\n            {startDemo &&\r\n            <>\r\n            <div>\r\n                <div className='chartContainer'>\r\n                    <Line data={data} options={options} />\r\n                </div>\r\n            </div>\r\n            \r\n            <div>\r\n                <Card  className='aalDemoResult'>\r\n                    <h3>Asset vs liability in 10 years</h3>\r\n                    <ul >\r\n                        <li>\r\n                            <h3>Asset</h3>\r\n                            <ul className='list'>\r\n                                <li>\r\n                                    <p>Initial Investment:</p> \r\n                                    <p>{formatNumber(10000)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Interest (6% year): </p> \r\n                                    <p>{formatNumber(chartData.interest)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Total: </p> \r\n                                    <h3 className='positive'>{formatNumber(chartData.interest+10000)}</h3>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            <h3>Liability</h3>\r\n                            <ul className='list'>\r\n                                <li>\r\n                                    <p>Car price:</p> \r\n                                    <p>{formatNumber(10000)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Depreciation (10% year): </p> \r\n                                    <p>{formatNumber(chartData.depreciation)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Gas (1500$ year : </p> \r\n                                    <p>{formatNumber(chartData.gas)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Insurance (900$ year): </p> \r\n                                    <p>{formatNumber(chartData.insurance)}</p>\r\n                                </li>\r\n                                <li>\r\n                                    <p>Total: </p> \r\n                                    <h3 className='negative'>{formatNumber(chartData.totalLiability)}</h3>\r\n                                </li>                        \r\n                            </ul>\r\n                        </li>\r\n                    </ul>   \r\n                </Card>\r\n            </div>     \r\n            </>   \r\n            }                 \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Asset(){\r\n\r\n    const [chartData,setChartData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Deposits',\r\n                data: [],\r\n                backgroundColor: colors.secondaryColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,                \r\n                borderWidth: 1\r\n            },\r\n            {\r\n                label: 'Interest',\r\n                data: [],\r\n                backgroundColor: colors.positiveColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1\r\n            },\r\n            {\r\n                type:'bar',\r\n                label: 'Yearly Interest',\r\n                data: [],\r\n                backgroundColor: colors.primaryColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1,\r\n                barPercentage: 0.6\r\n                \r\n            }\r\n        ]\r\n    })\r\n\r\n    const [inputs,setInputs] = useState({\r\n        startingInvestment:{value:10000,type:'slider',min:0,max:100000,step:1000,format:'€'},\r\n        annualReturn:{value:7,type:'slider',min:0,max:20,step:0.5,format:'%'},\r\n        monthlyDeposits:{value:200,type:'slider',min:0,max:2000,step:50,format:'€'},\r\n        timePeriod:{value:10,type:'slider',min:1,max:30,step:1,format:'Y'},\r\n    })\r\n\r\n    const [results,setResults] = useState({\r\n        deposits:0,\r\n        interest:0,\r\n        total:0,\r\n    })\r\n\r\n    useEffect(()=>{\r\n        let newLabels = []\r\n        let data=[]\r\n        let depositData=[]\r\n        let interestData=[]\r\n        let yearlyInterestData=[]\r\n        let startingValue = inputs.startingInvestment.value\r\n        const annualReturn = inputs.annualReturn.value\r\n        const monthlyDeposits = inputs.monthlyDeposits.value\r\n        const timePeriod = inputs.timePeriod.value\r\n        let deposits = startingValue\r\n\r\n        data.push(startingValue)\r\n        depositData.push(deposits)\r\n        interestData.push(0)\r\n        yearlyInterestData.push(0)\r\n        newLabels.push(`Year ${0}`)\r\n\r\n        for(var i=0;i<timePeriod;i++){\r\n            let label = `Year ${i+1}`\r\n            newLabels.push(label)\r\n            startingValue+=(monthlyDeposits*12) \r\n            deposits+=(monthlyDeposits*12)\r\n            startingValue*=((annualReturn/100)+1)          \r\n            data.push(startingValue)\r\n            depositData.push(deposits)\r\n            interestData.push(startingValue-deposits)\r\n            yearlyInterestData.push(startingValue*((annualReturn/100)+1)-startingValue)\r\n        }\r\n       \r\n        let total = data[data.length-1]\r\n        const chartCopy=chartData\r\n        chartCopy.datasets[0].data=depositData\r\n        chartCopy.datasets[1].data=interestData\r\n        chartCopy.datasets[2].data=yearlyInterestData\r\n        setChartData({...chartCopy,labels:newLabels})\r\n        setResults({\r\n            deposits:formatNumber(deposits,'€'),\r\n            interest:formatNumber((total-deposits),'€'),\r\n            total:formatNumber(total,'€')\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[inputs])\r\n\r\n    const content = [\r\n        {header:'Compound Interest',text:'Compound interest is result of reinvesting interest rather than paying it out.'},\r\n        {header:'ReInvesting',text:'Reinvesting dividends and interest fastens the compounding effect'},\r\n    ]\r\n\r\n    return(\r\n        <div className='sectionGrid'>\r\n            <div> \r\n                <TextList\r\n                    content={[\r\n                        {header:'Asset Playground',text:\"Assets generate income and make you wealthier even though you don't need use lot of time and energy. Assets include items like stocks, bonds, real estate etc that generate passive income.\"},\r\n                    ]}\r\n                /> \r\n                <ArticleAccordion content={content}/>\r\n            </div>\r\n            <div className='chartContainer'>\r\n                <Line data={chartData} options={assetChartOptions(true)} />\r\n            </div>\r\n            <div className='example'>                \r\n                <InputGroup header={'Asset example'} inputs={inputs} setInputs={setInputs}/>\r\n                <ResultCard header={`Result after ${inputs.timePeriod.value} years`} value={results.total} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Liability(){\r\n\r\n    const [chartData,setChartData] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: 'Car value',\r\n                data: [],\r\n                backgroundColor: 'rgba(82, 103, 122,0.5)',\r\n                pointRadius:0,\r\n                pointHitRadius:0,                \r\n                borderWidth: 1,\r\n                stack: 1,\r\n            },\r\n            {\r\n                label: 'Gas',\r\n                data: [],\r\n                backgroundColor: colors.negativeColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1,\r\n                stack: 1,\r\n            },\r\n            {\r\n                label: 'Insurance',\r\n                data: [],\r\n                backgroundColor: colors.negativeColor1,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 1,\r\n                stack: 1,\r\n            },\r\n            {\r\n                label: 'Total Cost',\r\n                data: [],\r\n                borderColor:colors.secondaryColor,\r\n                pointRadius:0,\r\n                pointHitRadius:0,\r\n                borderWidth: 3,\r\n                fill:false,\r\n                stack: 2,\r\n            }\r\n        ]\r\n    })\r\n\r\n    const [inputs,setInputs] = useState({\r\n        carPrice:{value:10000,type:'slider',min:0,max:100000,step:1000,format:'€'},\r\n        depreciationPerYear:{value:10,type:'slider',min:0,max:30,step:0.5,format:'%'},\r\n        gasPerYear:{value:1200,type:'slider',min:0,max:5000,step:50,format:'€'},\r\n        insuranceCostPerYear:{value:900,type:'slider',min:0,max:2000,step:50,format:'€'},\r\n    })\r\n\r\n    const [results,setResults] = useState({\r\n        totalCost:0,\r\n    })\r\n\r\n    useEffect(()=>{\r\n        let carPrice= inputs.carPrice.value\r\n        let depreciationPerYear = inputs.depreciationPerYear.value\r\n        let gasPerYear = inputs.gasPerYear.value\r\n        let insuranceCostPerYear = inputs.insuranceCostPerYear.value\r\n\r\n        let newLabels = []        \r\n        let liability = carPrice\r\n        let gas = -0.1\r\n        let insurance = -0.1\r\n        let liabilityData = []\r\n        let gasData = []\r\n        let insuranceData = []\r\n        let total=[]\r\n\r\n        for(let i=0; i<=10; i++) {\r\n            let label = `Year ${i}`\r\n            if(i===0) label=''\r\n            newLabels.push(label)\r\n            liabilityData.push(liability)\r\n            gasData.push(gas)\r\n            insuranceData.push(insurance)\r\n            total.push(-(carPrice-liability)+gas+insurance-gas)\r\n            liability-=liability*(depreciationPerYear/100)\r\n            gas-=gasPerYear\r\n            insurance-=insuranceCostPerYear\r\n            insurance-=gasPerYear         \r\n        }\r\n\r\n        const chartCopy={...chartData}\r\n        chartCopy.datasets[0].data=liabilityData\r\n        chartCopy.datasets[1].data=gasData\r\n        chartCopy.datasets[2].data=insuranceData\r\n        chartCopy.datasets[3].data=total\r\n        setChartData({...chartCopy,labels:newLabels})\r\n        let totalCost = total[total.length-1]\r\n        setResults({\r\n            totalCost:formatNumber(totalCost,'€'),\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[inputs])\r\n\r\n    const content = [\r\n        {header:'Depreciation',text:'Decrease of item value over time. Car value usually decreases 10 % a year.'},\r\n        {header:'Fixed Cost',text:\"Costs that are independent of the company activities or item usage. For example car insurance have to paid even if you don't drive at all.\"},\r\n        {header:'Variable Cost',text:'Costs that are tied to the company production output or item usage. For example car gas is variable cost because is tied to the kilometers you.'},\r\n    ]\r\n\r\n    return(\r\n        <div className='sectionGrid'>\r\n            <div> \r\n                <TextList\r\n                    content={[\r\n                        {header:'Liability Playground',text:'Liabilities loses value over time and are costly to maintain. For example cars, boats and  motorcycles values are dropping every year and they need lot of money for gas, insurance and maintenence etc.'},\r\n                    ]}\r\n                /> \r\n                <ArticleAccordion content={content}/>\r\n            </div>\r\n            <div className='chartContainer'>\r\n                <Line data={chartData} options={assetChartOptions(false)} />\r\n            </div>\r\n            <div className='example'>                \r\n                <InputGroup header={'Liability (Car)'} inputs={inputs} setInputs={setInputs}/>\r\n                <ResultCard header={`Total costs in 10 years`} value={results.totalCost} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Section\\SectionNav.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Section\\SectionContainer.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Exercise\\ExcersiseQuiz.js",["250"],"import React,{useState,useEffect} from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ExposureNeg1Icon from '@material-ui/icons/ExposureNeg1';\r\nimport './Exercise.css'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { useSelector } from 'react-redux'\r\nimport ExersiceCompleted from './ExerciseCompleted'\r\nimport ExerciseScore from './ExerciseScore'\r\nimport { formatDate } from '../../utils/utils';\r\nimport { InputSlider }  from '../Other/Sliders'\r\nimport { DeleteButton } from '../Other/Buttons'\r\nimport QUESTIONS from '../../courses/questions'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    color:'lightgreen',    \r\n  },\r\n  finish:{\r\n    backgroundColor:'var(--positive-color)',\r\n    \"&:hover\":{\r\n        backgroundColor:'lightgreen'\r\n    }\r\n  },\r\n  buttons:{\r\n        width:50\r\n  },\r\n  details:{\r\n    display:'grid',\r\n    gridTemplateColumns:'auto auto 1fr',\r\n    gridGap:10\r\n  },\r\n  detailsQuestion:{\r\n      gridColumn:'1/4',\r\n      fontSize:14\r\n  },\r\n  quizInitial:{\r\n    color:'var(--primary-color)',\r\n    backgroundColor:'var(--secondary-variant)',\r\n  }\r\n});\r\n\r\nconst createQuizQuestions=(section)=>{\r\n    const questions = QUESTIONS[section.course][section.name]\r\n    questions.forEach((item,index)=>{\r\n        item.userAnswer = null\r\n        item.id = index\r\n    })\r\n    return questions\r\n}\r\n\r\nexport default function ExerciseQuiz({section,completeSection,moveTo}){\r\n\r\n    const classes = useStyles();\r\n\r\n    const [quiz,setQuiz] = useState({\r\n        stage:'initial',//initial, quiz, results, completed\r\n        currentQuestion:0,\r\n        questions:[],\r\n        completedAt:formatDate()\r\n    })\r\n\r\n    const sectionGetCompleted = useSelector(state => state.sectionGetCompleted)\r\n    const { completedSections } = sectionGetCompleted\r\n\r\n    useEffect(()=>{\r\n        const newQuestions = createQuizQuestions(section)\r\n        setQuiz({...quiz,questions:newQuestions})\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(completedSections){\r\n            let sectionCompleted = completedSections\r\n                .find(item => item.sectionId===section.sectionId)\r\n            if(sectionCompleted){\r\n                let completedAt = formatDate(sectionCompleted.updatedAt) \r\n                setQuiz({...quiz,stage:'completed',score:sectionCompleted.score,completedAt:completedAt})\r\n            }\r\n        }\r\n    },[completedSections])\r\n\r\n    const startExerciseHandler=()=>{\r\n        const newQuestions = createQuizQuestions(section)\r\n        setQuiz({...quiz,stage:'quiz',questions:newQuestions})\r\n    }\r\n\r\n    const answerQuestionHandler = (option,index) =>{\r\n        const quizCopy = {...quiz}\r\n        quizCopy.questions[index].userAnswer = option\r\n        setQuiz(quizCopy)\r\n    }\r\n\r\n    const finishQuizHandler = (quiz) =>{\r\n        quiz.questions.forEach(item => item.correct = item.userAnswer===item.answer)\r\n        let correct = quiz.questions.reduce((a,c)=>a+(c.userAnswer===c.answer?1:0),0)\r\n        let total = quiz.questions.length\r\n        let wrong = total-correct\r\n        let notAnswered = 0\r\n        let score = { correct, total, wrong, notAnswered }\r\n        setQuiz({...quiz,stage:'results',score:score})\r\n    }\r\n\r\n    const completeQuizHandler=()=>{\r\n        completeSection(section.id,quiz.score)\r\n        setQuiz({...quiz,completedAt:formatDate(),stage:'completed',})\r\n    }\r\n\r\n    const tryAgainHandler=()=>{\r\n        const newQuestions = createQuizQuestions(section)        \r\n        setQuiz({...quiz,stage:'quiz',currentQuestion:0,questions:newQuestions})\r\n    }\r\n\r\n    const quitQuizHandler=()=>{\r\n        const quizCopy = {...quiz}\r\n        quizCopy.questions.forEach(item => item.userAnswer=null)\r\n        let newStage = quizCopy.score?'completed':'initial'\r\n        setQuiz({...quizCopy,stage:newStage})\r\n    }\r\n\r\n    return(\r\n        <div className='quizGrid'>\r\n            {quiz.stage==='initial'&&\r\n                <div className='quizInitial'>\r\n                    <Fab className={classes.quizInitial} onClick={startExerciseHandler} variant=\"extended\">\r\n                        Start Quiz\r\n                    </Fab>\r\n                </div>\r\n            }\r\n            {quiz.stage==='quiz'&&\r\n                <Card className='quiz'>\r\n                    <div className='quizHeader'>\r\n                        <h2>Question: {quiz.currentQuestion+1}</h2>\r\n                        <DeleteButton deleteItem={quitQuizHandler}/>\r\n                    </div>\r\n                    \r\n                    {quiz.questions[quiz.currentQuestion]&&\r\n                        <>\r\n                        <p>{quiz.questions[quiz.currentQuestion].question}</p>\r\n                        <div>\r\n                            {quiz.questions[quiz.currentQuestion].options&&\r\n                                <ButtonOptions quiz={quiz} answerQuestionHandler={answerQuestionHandler}/>\r\n                            }\r\n                            {quiz.questions[quiz.currentQuestion].slider&&\r\n                                <SliderOption quiz={quiz} answerQuestionHandler={answerQuestionHandler}/>\r\n                            }   \r\n                        </div>\r\n                        <QuizNav quiz={quiz} setQuiz={setQuiz} finishQuiz={finishQuizHandler}/>    \r\n                        </>                                 \r\n                    }\r\n\r\n                </Card>        \r\n            }\r\n            {quiz.stage==='results'&&\r\n                <>\r\n                    <QuizResults quiz={quiz} completeQuiz={completeQuizHandler} tryAgain={tryAgainHandler}/>\r\n                    <ExerciseScore section={quiz}/>\r\n                </>\r\n            }\r\n            {quiz.stage==='completed'&&\r\n                <ExersiceCompleted section={quiz} tryAgain={tryAgainHandler} moveTo={moveTo}/>\r\n            }\r\n\r\n        </div>        \r\n    )\r\n}\r\n\r\nfunction SliderOption({quiz,answerQuestionHandler}){\r\n    let currentQuestion=quiz.questions[quiz.currentQuestion]\r\n    let currentValue = currentQuestion.userAnswer===null?0:currentQuestion.userAnswer\r\n\r\n    const onChange=(e,value)=>{\r\n        answerQuestionHandler(value,quiz.currentQuestion)\r\n    }\r\n\r\n    return(\r\n        <div className='quizSlider'>\r\n            <InputSlider\r\n                value={currentValue}\r\n                onChange={onChange}\r\n                {...currentQuestion.slider}\r\n            />\r\n            <h2>{currentValue}{currentQuestion.slider.format}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ButtonOptions({quiz,answerQuestionHandler}){\r\n    return(\r\n        <ButtonGroup className={'quizButtons'} aria-label=\"outlined button group\">\r\n            {quiz.questions[quiz.currentQuestion].options.map((option,index) =>\r\n                <Button \r\n                    key={index}\r\n                    onClick={()=>answerQuestionHandler(option,quiz.currentQuestion)} \r\n                    id={index}\r\n                    className={quiz.questions[quiz.currentQuestion].userAnswer===option&&'selected'}\r\n                >\r\n                    {option}\r\n                </Button>\r\n            )}\r\n        </ButtonGroup>   \r\n    )\r\n}\r\n  \r\nfunction QuizResults({quiz,completeQuiz,tryAgain}){\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n  \r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n      setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    return(\r\n        <div className={'quizResults'}>       \r\n            <h2>Results</h2>\r\n            <div>\r\n                {quiz.questions.map((question,index) =>\r\n                    <Accordion key={index} expanded={expanded === 'panel'+index} onChange={handleChange('panel'+index)}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls={`panel${index}bh-content`}\r\n                        id={`panel${index}bh-header`}\r\n                    >\r\n                    <div  className='questionHeader'>\r\n                        <h3>{`Question ${index+1}.   `}</h3>\r\n                        {question.correct?\r\n                            <DoneIcon className={'correct icon'}/>\r\n                            :\r\n                            <ExposureNeg1Icon className={'wrong icon'} />}\r\n                    </div>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails  className={classes.details}>                \r\n                        <Typography className={classes.detailsQuestion}>\r\n                            {question.question}\r\n                        </Typography>\r\n                        <Chip className={'correct'} label={`Correct Answer: ${question.answer}`} />\r\n                        <Chip className={question.correct?'correct':'wrong'} label={`My Answer: ${question.userAnswer}`} />\r\n                    </AccordionDetails>\r\n                    </Accordion>            \r\n                )}            \r\n            </div>            \r\n            <ButtonGroup className='quizResultButtons' size=\"large\" aria-label=\"large outlined primary button group\">\r\n                <Button onClick={tryAgain}>Try again</Button>\r\n                <Button onClick={completeQuiz} className={classes.finish}>Continue</Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction QuizNav({quiz,setQuiz,finishQuiz}) {\r\n\r\n    let steps = quiz.questions.length\r\n    let currentStep =  quiz.currentQuestion\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const handleNext = (next) => {\r\n        const nextStep = quiz.currentQuestion + next\r\n        if(nextStep< steps){\r\n           setQuiz({...quiz,currentQuestion:nextStep}) \r\n        }else{\r\n            finishQuiz(quiz)\r\n            console.log('Finish quiz')\r\n        }\r\n    };\r\n\r\n    const getClasses=(currentStep,steps)=>{\r\n        let userAnswers = quiz.questions.reduce((a,c)=>a+(c.userAnswer!==null?1:0),0)\r\n        return currentStep === steps-1&&userAnswers=== steps&&classes.finish\r\n    }\r\n\r\n  return (\r\n    <MobileStepper\r\n      variant=\"progress\"\r\n      steps={steps}\r\n      position=\"static\"\r\n      activeStep={currentStep}\r\n      className={classes.root}\r\n      nextButton={\r\n        <Button className={`${classes.buttons} ${getClasses(currentStep,steps)}`} size=\"large\" onClick={()=>handleNext(1)}>\r\n          {currentStep === steps-1?'Finish':`Next`}\r\n          {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n        </Button>\r\n      }\r\n      backButton={\r\n        <Button className={classes.buttons} size=\"large\" onClick={()=>handleNext(-1)}disabled={currentStep === 0}>\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n           {'Back'} \r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n}\r\n","C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Article\\ArticleAccordion.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Table.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\VerticalStepper.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Sliders.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\Tooltip.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Exercise\\ExerciseCompleted.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\ShareExample.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\BusinessExample.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\ResultCard.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\colors.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Example\\InputGroup.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\chartOptions.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\sectionNav.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\courses\\questions.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\components\\Other\\ShowMore.js",[],"C:\\Users\\Juha\\Desktop\\Projectit\\stonksAcademy\\StonksAcademy\\client\\src\\utils\\snackbar.js",[],{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","severity":1,"message":"256","line":27,"column":13,"nodeType":"257","messageId":"258","endLine":27,"endColumn":20},{"ruleId":"259","severity":1,"message":"260","line":95,"column":24,"nodeType":"261","messageId":"262","endLine":115,"endColumn":14},{"ruleId":"263","severity":1,"message":"264","line":93,"column":7,"nodeType":"265","endLine":93,"endColumn":26,"suggestions":"266"},"no-native-reassign",["267"],"no-negated-in-lhs",["268"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'asset', 'liability', 'gas', 'insurance', 'asset', 'liability', 'gas', 'insurance', 'liability', 'gas', 'insurance', 'asset', 'liability', 'liability', 'gas', 'insurance'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'quiz' and 'section.sectionId'. Either include them or remove the dependency array. You can also do a functional update 'setQuiz(q => ...)' if you only need 'quiz' in the 'setQuiz' call.","ArrayExpression",["269"],"no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},"Update the dependencies array to be: [completedSections, quiz, section.sectionId]",{"range":"272","text":"273"},[3174,3193],"[completedSections, quiz, section.sectionId]"]